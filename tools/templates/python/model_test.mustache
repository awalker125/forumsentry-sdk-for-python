# coding: utf-8

{{>partial_header}}

from __future__ import absolute_import

import unittest
import string
import random
import copy

{{#models}}
{{#model}}
import {{packageName}}
from {{modelPackage}}.{{classFilename}} import {{classname}}  # noqa: E501
#from {{packageName}}.rest import ApiException


class Test{{classname}}(unittest.TestCase):
    """{{classname}} unit test stubs"""

    def id_generator(self, size=6, chars=string.ascii_uppercase + string.digits):
        return ''.join(random.choice(chars) for _ in range(size))

    def setUp(self):
        # FIXME: update assignements for none string types e.g boolean and int
        self._unique_id = self.id_generator()
        self._model = {{classname}}()  # noqa: E501
        
        {{#vars}}{{#-first}}
		{{/-first}}
        self._model.{{name}} = self._unique_id
		{{/vars}}

    def tearDown(self):
        pass

	'''
		>>>> custom tests
	'''
	#	
	#	Replace with custom tests to increase coverage to 100%. Typically this will be where a value error is thrown on a setter method. This is difficult to template.
	#
	'''
		<<<< custom tests
	'''

    def test{{classname}}(self):
        """Test {{classname}}"""
        
        model = {{classname}}()  # noqa: E501
        self.assertTrue(isinstance(model, {{classname}}))

    def test{{classname}}_constructor(self):
        """Test {{classname}}"""
        # FIXME: update assignements for none string types e.g boolean and int
        
        model = {{classname}}({{#vars}}{{name}}={{#defaultValue}}{{{defaultValue}}}{{/defaultValue}}{{^defaultValue}}None{{/defaultValue}}{{^-last}}, {{/-last}}{{/vars}})  # noqa: E501
        self.assertTrue(isinstance(model, {{classname}}))

    def test{{classname}}_constructor_none_default(self):
        """Test {{classname}}"""
        # FIXME: update assignements for none string types e.g boolean and int
        
        model = {{classname}}({{#vars}}{{name}}=self._unique_id{{^-last}}, {{/-last}}{{/vars}})  # noqa: E501
        self.assertTrue(isinstance(model, {{classname}}))

        
    def test{{classname}}_properties(self):
        """Test {{classname}}"""
        # FIXME: update assignements for none string types e.g boolean and int
        
        new_unique_id = self.id_generator()
        
        {{#vars}}{{#-first}}
		{{/-first}}
        self._model.{{name}} = new_unique_id
        self.assertEqual(self._model.{{name}},new_unique_id)
        self.assertNotEqual(self._model.{{name}},self._unique_id)
         
		{{/vars}}


    def test{{classname}}_compare(self):
        """Test {{classname}}"""
        
        
        new_unique_id = self.id_generator()
        
        model_copy = copy.deepcopy(self._model)
        
        #check out compare works
        self.assertEqual(model_copy,self._model)
        
        #change something on the model
        model_copy.name = new_unique_id 
        
        #check our compare detects they arent equal
        self.assertNotEqual(model_copy,self._model)


    def test{{classname}}_to_dict(self):
        """Test {{classname}}"""
        
        to_dict_object = self._model.to_dict()        

        self.assertTrue(isinstance(to_dict_object,dict))
        
    def test{{classname}}_to_str(self):
        """Test {{classname}}"""
        
        to_str_object = self._model.to_str()        

        self.assertTrue(isinstance(to_str_object,str))
        



{{/model}}
{{/models}}

if __name__ == '__main__':
    unittest.main()
