# coding: utf-8

"""

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class HttpListenerPolicy(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, description=None, username_parameter=None, password_parameter=None, ip_acl_policy=None, listener_host=None, ip_range=None, ip_range_means_deny=None, use_form_post_authentication=None, use_kerberos_authentication=None, password_authentication_realm=None, listener_ssl_enabled=None, listener_ssl_policy=None, use_chunking=None, require_password_authentication=None, use_basic_authentication=None, use_digest_authentication=None, use_cookie_authentication=None, ip=None, read_timeout_millis=None, use_device_ip=None, interface=None, port=None, acl_policy=None, error_template=None, enabled=None, comment=None):
        """
        HttpListenerPolicy - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'description': 'str',
            'username_parameter': 'str',
            'password_parameter': 'str',
            'ip_acl_policy': 'str',
            'listener_host': 'str',
            'ip_range': 'list[str]',
            'ip_range_means_deny': 'bool',
            'use_form_post_authentication': 'bool',
            'use_kerberos_authentication': 'bool',
            'password_authentication_realm': 'str',
            'listener_ssl_enabled': 'bool',
            'listener_ssl_policy': 'str',
            'use_chunking': 'bool',
            'require_password_authentication': 'bool',
            'use_basic_authentication': 'bool',
            'use_digest_authentication': 'bool',
            'use_cookie_authentication': 'bool',
            'ip': 'str',
            'read_timeout_millis': 'int',
            'use_device_ip': 'bool',
            'interface': 'str',
            'port': 'int',
            'acl_policy': 'str',
            'error_template': 'str',
            'enabled': 'bool',
            'comment': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'username_parameter': 'usernameParameter',
            'password_parameter': 'passwordParameter',
            'ip_acl_policy': 'ipAclPolicy',
            'listener_host': 'listenerHost',
            'ip_range': 'ipRange',
            'ip_range_means_deny': 'ipRangeMeansDeny',
            'use_form_post_authentication': 'useFormPostAuthentication',
            'use_kerberos_authentication': 'useKerberosAuthentication',
            'password_authentication_realm': 'passwordAuthenticationRealm',
            'listener_ssl_enabled': 'listenerSSLEnabled',
            'listener_ssl_policy': 'listenerSSLPolicy',
            'use_chunking': 'useChunking',
            'require_password_authentication': 'requirePasswordAuthentication',
            'use_basic_authentication': 'useBasicAuthentication',
            'use_digest_authentication': 'useDigestAuthentication',
            'use_cookie_authentication': 'useCookieAuthentication',
            'ip': 'ip',
            'read_timeout_millis': 'readTimeoutMillis',
            'use_device_ip': 'useDeviceIp',
            'interface': 'interface',
            'port': 'port',
            'acl_policy': 'aclPolicy',
            'error_template': 'errorTemplate',
            'enabled': 'enabled',
            'comment': 'comment'
        }

        self._name = name
        self._description = description
        self._username_parameter = username_parameter
        self._password_parameter = password_parameter
        self._ip_acl_policy = ip_acl_policy
        self._listener_host = listener_host
        self._ip_range = ip_range
        self._ip_range_means_deny = ip_range_means_deny
        self._use_form_post_authentication = use_form_post_authentication
        self._use_kerberos_authentication = use_kerberos_authentication
        self._password_authentication_realm = password_authentication_realm
        self._listener_ssl_enabled = listener_ssl_enabled
        self._listener_ssl_policy = listener_ssl_policy
        self._use_chunking = use_chunking
        self._require_password_authentication = require_password_authentication
        self._use_basic_authentication = use_basic_authentication
        self._use_digest_authentication = use_digest_authentication
        self._use_cookie_authentication = use_cookie_authentication
        self._ip = ip
        self._read_timeout_millis = read_timeout_millis
        self._use_device_ip = use_device_ip
        self._interface = interface
        self._port = port
        self._acl_policy = acl_policy
        self._error_template = error_template
        self._enabled = enabled
        self._comment = comment

    @property
    def name(self):
        """
        Gets the name of this HttpListenerPolicy.


        :return: The name of this HttpListenerPolicy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this HttpListenerPolicy.


        :param name: The name of this HttpListenerPolicy.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this HttpListenerPolicy.


        :return: The description of this HttpListenerPolicy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this HttpListenerPolicy.


        :param description: The description of this HttpListenerPolicy.
        :type: str
        """

        self._description = description

    @property
    def username_parameter(self):
        """
        Gets the username_parameter of this HttpListenerPolicy.


        :return: The username_parameter of this HttpListenerPolicy.
        :rtype: str
        """
        return self._username_parameter

    @username_parameter.setter
    def username_parameter(self, username_parameter):
        """
        Sets the username_parameter of this HttpListenerPolicy.


        :param username_parameter: The username_parameter of this HttpListenerPolicy.
        :type: str
        """

        self._username_parameter = username_parameter

    @property
    def password_parameter(self):
        """
        Gets the password_parameter of this HttpListenerPolicy.


        :return: The password_parameter of this HttpListenerPolicy.
        :rtype: str
        """
        return self._password_parameter

    @password_parameter.setter
    def password_parameter(self, password_parameter):
        """
        Sets the password_parameter of this HttpListenerPolicy.


        :param password_parameter: The password_parameter of this HttpListenerPolicy.
        :type: str
        """

        self._password_parameter = password_parameter

    @property
    def ip_acl_policy(self):
        """
        Gets the ip_acl_policy of this HttpListenerPolicy.


        :return: The ip_acl_policy of this HttpListenerPolicy.
        :rtype: str
        """
        return self._ip_acl_policy

    @ip_acl_policy.setter
    def ip_acl_policy(self, ip_acl_policy):
        """
        Sets the ip_acl_policy of this HttpListenerPolicy.


        :param ip_acl_policy: The ip_acl_policy of this HttpListenerPolicy.
        :type: str
        """

        self._ip_acl_policy = ip_acl_policy

    @property
    def listener_host(self):
        """
        Gets the listener_host of this HttpListenerPolicy.


        :return: The listener_host of this HttpListenerPolicy.
        :rtype: str
        """
        return self._listener_host

    @listener_host.setter
    def listener_host(self, listener_host):
        """
        Sets the listener_host of this HttpListenerPolicy.


        :param listener_host: The listener_host of this HttpListenerPolicy.
        :type: str
        """

        self._listener_host = listener_host

    @property
    def ip_range(self):
        """
        Gets the ip_range of this HttpListenerPolicy.


        :return: The ip_range of this HttpListenerPolicy.
        :rtype: list[str]
        """
        return self._ip_range

    @ip_range.setter
    def ip_range(self, ip_range):
        """
        Sets the ip_range of this HttpListenerPolicy.


        :param ip_range: The ip_range of this HttpListenerPolicy.
        :type: list[str]
        """

        self._ip_range = ip_range

    @property
    def ip_range_means_deny(self):
        """
        Gets the ip_range_means_deny of this HttpListenerPolicy.


        :return: The ip_range_means_deny of this HttpListenerPolicy.
        :rtype: bool
        """
        return self._ip_range_means_deny

    @ip_range_means_deny.setter
    def ip_range_means_deny(self, ip_range_means_deny):
        """
        Sets the ip_range_means_deny of this HttpListenerPolicy.


        :param ip_range_means_deny: The ip_range_means_deny of this HttpListenerPolicy.
        :type: bool
        """

        self._ip_range_means_deny = ip_range_means_deny

    @property
    def use_form_post_authentication(self):
        """
        Gets the use_form_post_authentication of this HttpListenerPolicy.


        :return: The use_form_post_authentication of this HttpListenerPolicy.
        :rtype: bool
        """
        return self._use_form_post_authentication

    @use_form_post_authentication.setter
    def use_form_post_authentication(self, use_form_post_authentication):
        """
        Sets the use_form_post_authentication of this HttpListenerPolicy.


        :param use_form_post_authentication: The use_form_post_authentication of this HttpListenerPolicy.
        :type: bool
        """

        self._use_form_post_authentication = use_form_post_authentication

    @property
    def use_kerberos_authentication(self):
        """
        Gets the use_kerberos_authentication of this HttpListenerPolicy.


        :return: The use_kerberos_authentication of this HttpListenerPolicy.
        :rtype: bool
        """
        return self._use_kerberos_authentication

    @use_kerberos_authentication.setter
    def use_kerberos_authentication(self, use_kerberos_authentication):
        """
        Sets the use_kerberos_authentication of this HttpListenerPolicy.


        :param use_kerberos_authentication: The use_kerberos_authentication of this HttpListenerPolicy.
        :type: bool
        """

        self._use_kerberos_authentication = use_kerberos_authentication

    @property
    def password_authentication_realm(self):
        """
        Gets the password_authentication_realm of this HttpListenerPolicy.


        :return: The password_authentication_realm of this HttpListenerPolicy.
        :rtype: str
        """
        return self._password_authentication_realm

    @password_authentication_realm.setter
    def password_authentication_realm(self, password_authentication_realm):
        """
        Sets the password_authentication_realm of this HttpListenerPolicy.


        :param password_authentication_realm: The password_authentication_realm of this HttpListenerPolicy.
        :type: str
        """

        self._password_authentication_realm = password_authentication_realm

    @property
    def listener_ssl_enabled(self):
        """
        Gets the listener_ssl_enabled of this HttpListenerPolicy.


        :return: The listener_ssl_enabled of this HttpListenerPolicy.
        :rtype: bool
        """
        return self._listener_ssl_enabled

    @listener_ssl_enabled.setter
    def listener_ssl_enabled(self, listener_ssl_enabled):
        """
        Sets the listener_ssl_enabled of this HttpListenerPolicy.


        :param listener_ssl_enabled: The listener_ssl_enabled of this HttpListenerPolicy.
        :type: bool
        """

        self._listener_ssl_enabled = listener_ssl_enabled

    @property
    def listener_ssl_policy(self):
        """
        Gets the listener_ssl_policy of this HttpListenerPolicy.


        :return: The listener_ssl_policy of this HttpListenerPolicy.
        :rtype: str
        """
        return self._listener_ssl_policy

    @listener_ssl_policy.setter
    def listener_ssl_policy(self, listener_ssl_policy):
        """
        Sets the listener_ssl_policy of this HttpListenerPolicy.


        :param listener_ssl_policy: The listener_ssl_policy of this HttpListenerPolicy.
        :type: str
        """

        self._listener_ssl_policy = listener_ssl_policy

    @property
    def use_chunking(self):
        """
        Gets the use_chunking of this HttpListenerPolicy.


        :return: The use_chunking of this HttpListenerPolicy.
        :rtype: bool
        """
        return self._use_chunking

    @use_chunking.setter
    def use_chunking(self, use_chunking):
        """
        Sets the use_chunking of this HttpListenerPolicy.


        :param use_chunking: The use_chunking of this HttpListenerPolicy.
        :type: bool
        """

        self._use_chunking = use_chunking

    @property
    def require_password_authentication(self):
        """
        Gets the require_password_authentication of this HttpListenerPolicy.


        :return: The require_password_authentication of this HttpListenerPolicy.
        :rtype: bool
        """
        return self._require_password_authentication

    @require_password_authentication.setter
    def require_password_authentication(self, require_password_authentication):
        """
        Sets the require_password_authentication of this HttpListenerPolicy.


        :param require_password_authentication: The require_password_authentication of this HttpListenerPolicy.
        :type: bool
        """

        self._require_password_authentication = require_password_authentication

    @property
    def use_basic_authentication(self):
        """
        Gets the use_basic_authentication of this HttpListenerPolicy.


        :return: The use_basic_authentication of this HttpListenerPolicy.
        :rtype: bool
        """
        return self._use_basic_authentication

    @use_basic_authentication.setter
    def use_basic_authentication(self, use_basic_authentication):
        """
        Sets the use_basic_authentication of this HttpListenerPolicy.


        :param use_basic_authentication: The use_basic_authentication of this HttpListenerPolicy.
        :type: bool
        """

        self._use_basic_authentication = use_basic_authentication

    @property
    def use_digest_authentication(self):
        """
        Gets the use_digest_authentication of this HttpListenerPolicy.


        :return: The use_digest_authentication of this HttpListenerPolicy.
        :rtype: bool
        """
        return self._use_digest_authentication

    @use_digest_authentication.setter
    def use_digest_authentication(self, use_digest_authentication):
        """
        Sets the use_digest_authentication of this HttpListenerPolicy.


        :param use_digest_authentication: The use_digest_authentication of this HttpListenerPolicy.
        :type: bool
        """

        self._use_digest_authentication = use_digest_authentication

    @property
    def use_cookie_authentication(self):
        """
        Gets the use_cookie_authentication of this HttpListenerPolicy.


        :return: The use_cookie_authentication of this HttpListenerPolicy.
        :rtype: bool
        """
        return self._use_cookie_authentication

    @use_cookie_authentication.setter
    def use_cookie_authentication(self, use_cookie_authentication):
        """
        Sets the use_cookie_authentication of this HttpListenerPolicy.


        :param use_cookie_authentication: The use_cookie_authentication of this HttpListenerPolicy.
        :type: bool
        """

        self._use_cookie_authentication = use_cookie_authentication

    @property
    def ip(self):
        """
        Gets the ip of this HttpListenerPolicy.


        :return: The ip of this HttpListenerPolicy.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """
        Sets the ip of this HttpListenerPolicy.


        :param ip: The ip of this HttpListenerPolicy.
        :type: str
        """

        self._ip = ip

    @property
    def read_timeout_millis(self):
        """
        Gets the read_timeout_millis of this HttpListenerPolicy.


        :return: The read_timeout_millis of this HttpListenerPolicy.
        :rtype: int
        """
        return self._read_timeout_millis

    @read_timeout_millis.setter
    def read_timeout_millis(self, read_timeout_millis):
        """
        Sets the read_timeout_millis of this HttpListenerPolicy.


        :param read_timeout_millis: The read_timeout_millis of this HttpListenerPolicy.
        :type: int
        """

        self._read_timeout_millis = read_timeout_millis

    @property
    def use_device_ip(self):
        """
        Gets the use_device_ip of this HttpListenerPolicy.


        :return: The use_device_ip of this HttpListenerPolicy.
        :rtype: bool
        """
        return self._use_device_ip

    @use_device_ip.setter
    def use_device_ip(self, use_device_ip):
        """
        Sets the use_device_ip of this HttpListenerPolicy.


        :param use_device_ip: The use_device_ip of this HttpListenerPolicy.
        :type: bool
        """

        self._use_device_ip = use_device_ip

    @property
    def interface(self):
        """
        Gets the interface of this HttpListenerPolicy.


        :return: The interface of this HttpListenerPolicy.
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """
        Sets the interface of this HttpListenerPolicy.


        :param interface: The interface of this HttpListenerPolicy.
        :type: str
        """
        allowed_values = ["WAN", "LAN"]
        if interface not in allowed_values:
            raise ValueError(
                "Invalid value for `interface` ({0}), must be one of {1}"
                .format(interface, allowed_values)
            )

        self._interface = interface

    @property
    def port(self):
        """
        Gets the port of this HttpListenerPolicy.


        :return: The port of this HttpListenerPolicy.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """
        Sets the port of this HttpListenerPolicy.


        :param port: The port of this HttpListenerPolicy.
        :type: int
        """

        self._port = port

    @property
    def acl_policy(self):
        """
        Gets the acl_policy of this HttpListenerPolicy.


        :return: The acl_policy of this HttpListenerPolicy.
        :rtype: str
        """
        return self._acl_policy

    @acl_policy.setter
    def acl_policy(self, acl_policy):
        """
        Sets the acl_policy of this HttpListenerPolicy.


        :param acl_policy: The acl_policy of this HttpListenerPolicy.
        :type: str
        """

        self._acl_policy = acl_policy

    @property
    def error_template(self):
        """
        Gets the error_template of this HttpListenerPolicy.


        :return: The error_template of this HttpListenerPolicy.
        :rtype: str
        """
        return self._error_template

    @error_template.setter
    def error_template(self, error_template):
        """
        Sets the error_template of this HttpListenerPolicy.


        :param error_template: The error_template of this HttpListenerPolicy.
        :type: str
        """

        self._error_template = error_template

    @property
    def enabled(self):
        """
        Gets the enabled of this HttpListenerPolicy.


        :return: The enabled of this HttpListenerPolicy.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this HttpListenerPolicy.


        :param enabled: The enabled of this HttpListenerPolicy.
        :type: bool
        """

        self._enabled = enabled

    @property
    def comment(self):
        """
        Gets the comment of this HttpListenerPolicy.


        :return: The comment of this HttpListenerPolicy.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """
        Sets the comment of this HttpListenerPolicy.


        :param comment: The comment of this HttpListenerPolicy.
        :type: str
        """

        self._comment = comment

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
