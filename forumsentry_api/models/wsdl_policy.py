# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class WsdlPolicy(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, process_request=None, post_response_process_type=None, body_validation=None, name=None, post_response_process=None, post_request_process_type=None, header_validation=None, description=None, request_process_type=None, post_process_response=None, wsi_validation=None, post_process_request=None, post_request_process=None, response_process_type=None, idp_group=None, process_response=None, request_process=None, allow_additional_headers=None, response_process=None, envelope_validation=None):
        """
        WsdlPolicy - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'process_request': 'bool',
            'post_response_process_type': 'str',
            'body_validation': 'bool',
            'name': 'str',
            'post_response_process': 'str',
            'post_request_process_type': 'str',
            'header_validation': 'bool',
            'description': 'str',
            'request_process_type': 'str',
            'post_process_response': 'bool',
            'wsi_validation': 'bool',
            'post_process_request': 'bool',
            'post_request_process': 'str',
            'response_process_type': 'str',
            'idp_group': 'str',
            'process_response': 'bool',
            'request_process': 'str',
            'allow_additional_headers': 'bool',
            'response_process': 'str',
            'envelope_validation': 'bool'
        }

        self.attribute_map = {
            'process_request': 'processRequest',
            'post_response_process_type': 'postResponseProcessType',
            'body_validation': 'bodyValidation',
            'name': 'name',
            'post_response_process': 'postResponseProcess',
            'post_request_process_type': 'postRequestProcessType',
            'header_validation': 'headerValidation',
            'description': 'description',
            'request_process_type': 'requestProcessType',
            'post_process_response': 'postProcessResponse',
            'wsi_validation': 'wsiValidation',
            'post_process_request': 'postProcessRequest',
            'post_request_process': 'postRequestProcess',
            'response_process_type': 'responseProcessType',
            'idp_group': 'idpGroup',
            'process_response': 'processResponse',
            'request_process': 'requestProcess',
            'allow_additional_headers': 'allowAdditionalHeaders',
            'response_process': 'responseProcess',
            'envelope_validation': 'envelopeValidation'
        }

        self._process_request = process_request
        self._post_response_process_type = post_response_process_type
        self._body_validation = body_validation
        self._name = name
        self._post_response_process = post_response_process
        self._post_request_process_type = post_request_process_type
        self._header_validation = header_validation
        self._description = description
        self._request_process_type = request_process_type
        self._post_process_response = post_process_response
        self._wsi_validation = wsi_validation
        self._post_process_request = post_process_request
        self._post_request_process = post_request_process
        self._response_process_type = response_process_type
        self._idp_group = idp_group
        self._process_response = process_response
        self._request_process = request_process
        self._allow_additional_headers = allow_additional_headers
        self._response_process = response_process
        self._envelope_validation = envelope_validation

    @property
    def process_request(self):
        """
        Gets the process_request of this WsdlPolicy.


        :return: The process_request of this WsdlPolicy.
        :rtype: bool
        """
        return self._process_request

    @process_request.setter
    def process_request(self, process_request):
        """
        Sets the process_request of this WsdlPolicy.


        :param process_request: The process_request of this WsdlPolicy.
        :type: bool
        """

        self._process_request = process_request

    @property
    def post_response_process_type(self):
        """
        Gets the post_response_process_type of this WsdlPolicy.


        :return: The post_response_process_type of this WsdlPolicy.
        :rtype: str
        """
        return self._post_response_process_type

    @post_response_process_type.setter
    def post_response_process_type(self, post_response_process_type):
        """
        Sets the post_response_process_type of this WsdlPolicy.


        :param post_response_process_type: The post_response_process_type of this WsdlPolicy.
        :type: str
        """
        allowed_values = ["TASK_LIST", "TASK_LIST_GROUP"]
        if post_response_process_type not in allowed_values:
            raise ValueError(
                "Invalid value for `post_response_process_type` ({0}), must be one of {1}"
                .format(post_response_process_type, allowed_values)
            )

        self._post_response_process_type = post_response_process_type

    @property
    def body_validation(self):
        """
        Gets the body_validation of this WsdlPolicy.


        :return: The body_validation of this WsdlPolicy.
        :rtype: bool
        """
        return self._body_validation

    @body_validation.setter
    def body_validation(self, body_validation):
        """
        Sets the body_validation of this WsdlPolicy.


        :param body_validation: The body_validation of this WsdlPolicy.
        :type: bool
        """

        self._body_validation = body_validation

    @property
    def name(self):
        """
        Gets the name of this WsdlPolicy.


        :return: The name of this WsdlPolicy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this WsdlPolicy.


        :param name: The name of this WsdlPolicy.
        :type: str
        """

        self._name = name

    @property
    def post_response_process(self):
        """
        Gets the post_response_process of this WsdlPolicy.


        :return: The post_response_process of this WsdlPolicy.
        :rtype: str
        """
        return self._post_response_process

    @post_response_process.setter
    def post_response_process(self, post_response_process):
        """
        Sets the post_response_process of this WsdlPolicy.


        :param post_response_process: The post_response_process of this WsdlPolicy.
        :type: str
        """

        self._post_response_process = post_response_process

    @property
    def post_request_process_type(self):
        """
        Gets the post_request_process_type of this WsdlPolicy.


        :return: The post_request_process_type of this WsdlPolicy.
        :rtype: str
        """
        return self._post_request_process_type

    @post_request_process_type.setter
    def post_request_process_type(self, post_request_process_type):
        """
        Sets the post_request_process_type of this WsdlPolicy.


        :param post_request_process_type: The post_request_process_type of this WsdlPolicy.
        :type: str
        """
        allowed_values = ["TASK_LIST", "TASK_LIST_GROUP"]
        if post_request_process_type not in allowed_values:
            raise ValueError(
                "Invalid value for `post_request_process_type` ({0}), must be one of {1}"
                .format(post_request_process_type, allowed_values)
            )

        self._post_request_process_type = post_request_process_type

    @property
    def header_validation(self):
        """
        Gets the header_validation of this WsdlPolicy.


        :return: The header_validation of this WsdlPolicy.
        :rtype: bool
        """
        return self._header_validation

    @header_validation.setter
    def header_validation(self, header_validation):
        """
        Sets the header_validation of this WsdlPolicy.


        :param header_validation: The header_validation of this WsdlPolicy.
        :type: bool
        """

        self._header_validation = header_validation

    @property
    def description(self):
        """
        Gets the description of this WsdlPolicy.


        :return: The description of this WsdlPolicy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this WsdlPolicy.


        :param description: The description of this WsdlPolicy.
        :type: str
        """

        self._description = description

    @property
    def request_process_type(self):
        """
        Gets the request_process_type of this WsdlPolicy.


        :return: The request_process_type of this WsdlPolicy.
        :rtype: str
        """
        return self._request_process_type

    @request_process_type.setter
    def request_process_type(self, request_process_type):
        """
        Sets the request_process_type of this WsdlPolicy.


        :param request_process_type: The request_process_type of this WsdlPolicy.
        :type: str
        """
        allowed_values = ["TASK_LIST", "TASK_LIST_GROUP"]
        if request_process_type not in allowed_values:
            raise ValueError(
                "Invalid value for `request_process_type` ({0}), must be one of {1}"
                .format(request_process_type, allowed_values)
            )

        self._request_process_type = request_process_type

    @property
    def post_process_response(self):
        """
        Gets the post_process_response of this WsdlPolicy.


        :return: The post_process_response of this WsdlPolicy.
        :rtype: bool
        """
        return self._post_process_response

    @post_process_response.setter
    def post_process_response(self, post_process_response):
        """
        Sets the post_process_response of this WsdlPolicy.


        :param post_process_response: The post_process_response of this WsdlPolicy.
        :type: bool
        """

        self._post_process_response = post_process_response

    @property
    def wsi_validation(self):
        """
        Gets the wsi_validation of this WsdlPolicy.


        :return: The wsi_validation of this WsdlPolicy.
        :rtype: bool
        """
        return self._wsi_validation

    @wsi_validation.setter
    def wsi_validation(self, wsi_validation):
        """
        Sets the wsi_validation of this WsdlPolicy.


        :param wsi_validation: The wsi_validation of this WsdlPolicy.
        :type: bool
        """

        self._wsi_validation = wsi_validation

    @property
    def post_process_request(self):
        """
        Gets the post_process_request of this WsdlPolicy.


        :return: The post_process_request of this WsdlPolicy.
        :rtype: bool
        """
        return self._post_process_request

    @post_process_request.setter
    def post_process_request(self, post_process_request):
        """
        Sets the post_process_request of this WsdlPolicy.


        :param post_process_request: The post_process_request of this WsdlPolicy.
        :type: bool
        """

        self._post_process_request = post_process_request

    @property
    def post_request_process(self):
        """
        Gets the post_request_process of this WsdlPolicy.


        :return: The post_request_process of this WsdlPolicy.
        :rtype: str
        """
        return self._post_request_process

    @post_request_process.setter
    def post_request_process(self, post_request_process):
        """
        Sets the post_request_process of this WsdlPolicy.


        :param post_request_process: The post_request_process of this WsdlPolicy.
        :type: str
        """

        self._post_request_process = post_request_process

    @property
    def response_process_type(self):
        """
        Gets the response_process_type of this WsdlPolicy.


        :return: The response_process_type of this WsdlPolicy.
        :rtype: str
        """
        return self._response_process_type

    @response_process_type.setter
    def response_process_type(self, response_process_type):
        """
        Sets the response_process_type of this WsdlPolicy.


        :param response_process_type: The response_process_type of this WsdlPolicy.
        :type: str
        """
        allowed_values = ["TASK_LIST", "TASK_LIST_GROUP"]
        if response_process_type not in allowed_values:
            raise ValueError(
                "Invalid value for `response_process_type` ({0}), must be one of {1}"
                .format(response_process_type, allowed_values)
            )

        self._response_process_type = response_process_type

    @property
    def idp_group(self):
        """
        Gets the idp_group of this WsdlPolicy.


        :return: The idp_group of this WsdlPolicy.
        :rtype: str
        """
        return self._idp_group

    @idp_group.setter
    def idp_group(self, idp_group):
        """
        Sets the idp_group of this WsdlPolicy.


        :param idp_group: The idp_group of this WsdlPolicy.
        :type: str
        """

        self._idp_group = idp_group

    @property
    def process_response(self):
        """
        Gets the process_response of this WsdlPolicy.


        :return: The process_response of this WsdlPolicy.
        :rtype: bool
        """
        return self._process_response

    @process_response.setter
    def process_response(self, process_response):
        """
        Sets the process_response of this WsdlPolicy.


        :param process_response: The process_response of this WsdlPolicy.
        :type: bool
        """

        self._process_response = process_response

    @property
    def request_process(self):
        """
        Gets the request_process of this WsdlPolicy.


        :return: The request_process of this WsdlPolicy.
        :rtype: str
        """
        return self._request_process

    @request_process.setter
    def request_process(self, request_process):
        """
        Sets the request_process of this WsdlPolicy.


        :param request_process: The request_process of this WsdlPolicy.
        :type: str
        """

        self._request_process = request_process

    @property
    def allow_additional_headers(self):
        """
        Gets the allow_additional_headers of this WsdlPolicy.


        :return: The allow_additional_headers of this WsdlPolicy.
        :rtype: bool
        """
        return self._allow_additional_headers

    @allow_additional_headers.setter
    def allow_additional_headers(self, allow_additional_headers):
        """
        Sets the allow_additional_headers of this WsdlPolicy.


        :param allow_additional_headers: The allow_additional_headers of this WsdlPolicy.
        :type: bool
        """

        self._allow_additional_headers = allow_additional_headers

    @property
    def response_process(self):
        """
        Gets the response_process of this WsdlPolicy.


        :return: The response_process of this WsdlPolicy.
        :rtype: str
        """
        return self._response_process

    @response_process.setter
    def response_process(self, response_process):
        """
        Sets the response_process of this WsdlPolicy.


        :param response_process: The response_process of this WsdlPolicy.
        :type: str
        """

        self._response_process = response_process

    @property
    def envelope_validation(self):
        """
        Gets the envelope_validation of this WsdlPolicy.


        :return: The envelope_validation of this WsdlPolicy.
        :rtype: bool
        """
        return self._envelope_validation

    @envelope_validation.setter
    def envelope_validation(self, envelope_validation):
        """
        Sets the envelope_validation of this WsdlPolicy.


        :param envelope_validation: The envelope_validation of this WsdlPolicy.
        :type: bool
        """

        self._envelope_validation = envelope_validation

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
