# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class IpACL1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, ip_ranges=None, ip_range_means_deny=None, name=None):
        """
        IpACL1 - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'ip_ranges': 'list[str]',
            'ip_range_means_deny': 'bool',
            'name': 'str'
        }

        self.attribute_map = {
            'ip_ranges': 'ipRanges',
            'ip_range_means_deny': 'ipRangeMeansDeny',
            'name': 'name'
        }

        self._ip_ranges = ip_ranges
        self._ip_range_means_deny = ip_range_means_deny
        self._name = name

    @property
    def ip_ranges(self):
        """
        Gets the ip_ranges of this IpACL1.


        :return: The ip_ranges of this IpACL1.
        :rtype: list[str]
        """
        return self._ip_ranges

    @ip_ranges.setter
    def ip_ranges(self, ip_ranges):
        """
        Sets the ip_ranges of this IpACL1.


        :param ip_ranges: The ip_ranges of this IpACL1.
        :type: list[str]
        """

        self._ip_ranges = ip_ranges

    @property
    def ip_range_means_deny(self):
        """
        Gets the ip_range_means_deny of this IpACL1.


        :return: The ip_range_means_deny of this IpACL1.
        :rtype: bool
        """
        return self._ip_range_means_deny

    @ip_range_means_deny.setter
    def ip_range_means_deny(self, ip_range_means_deny):
        """
        Sets the ip_range_means_deny of this IpACL1.


        :param ip_range_means_deny: The ip_range_means_deny of this IpACL1.
        :type: bool
        """

        self._ip_range_means_deny = ip_range_means_deny

    @property
    def name(self):
        """
        Gets the name of this IpACL1.


        :return: The name of this IpACL1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this IpACL1.


        :param name: The name of this IpACL1.
        :type: str
        """

        self._name = name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
