# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Port(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acl_policy': 'str',
        'description': 'str',
        'error_template': 'str',
        'request_filter_policy': 'str'
    }

    attribute_map = {
        'acl_policy': 'aclPolicy',
        'description': 'description',
        'error_template': 'errorTemplate',
        'request_filter_policy': 'requestFilterPolicy'
    }

    def __init__(self, acl_policy=None, description=None, error_template=None, request_filter_policy=None):  # noqa: E501
        """Port - a model defined in Swagger"""  # noqa: E501

        self._acl_policy = None
        self._description = None
        self._error_template = None
        self._request_filter_policy = None
        self.discriminator = None

        if acl_policy is not None:
            self.acl_policy = acl_policy
        if description is not None:
            self.description = description
        if error_template is not None:
            self.error_template = error_template
        if request_filter_policy is not None:
            self.request_filter_policy = request_filter_policy

    @property
    def acl_policy(self):
        """Gets the acl_policy of this Port.  # noqa: E501


        :return: The acl_policy of this Port.  # noqa: E501
        :rtype: str
        """
        return self._acl_policy

    @acl_policy.setter
    def acl_policy(self, acl_policy):
        """Sets the acl_policy of this Port.


        :param acl_policy: The acl_policy of this Port.  # noqa: E501
        :type: str
        """

        self._acl_policy = acl_policy

    @property
    def description(self):
        """Gets the description of this Port.  # noqa: E501


        :return: The description of this Port.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Port.


        :param description: The description of this Port.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def error_template(self):
        """Gets the error_template of this Port.  # noqa: E501


        :return: The error_template of this Port.  # noqa: E501
        :rtype: str
        """
        return self._error_template

    @error_template.setter
    def error_template(self, error_template):
        """Sets the error_template of this Port.


        :param error_template: The error_template of this Port.  # noqa: E501
        :type: str
        """

        self._error_template = error_template

    @property
    def request_filter_policy(self):
        """Gets the request_filter_policy of this Port.  # noqa: E501


        :return: The request_filter_policy of this Port.  # noqa: E501
        :rtype: str
        """
        return self._request_filter_policy

    @request_filter_policy.setter
    def request_filter_policy(self, request_filter_policy):
        """Sets the request_filter_policy of this Port.


        :param request_filter_policy: The request_filter_policy of this Port.  # noqa: E501
        :type: str
        """

        self._request_filter_policy = request_filter_policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Port):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
