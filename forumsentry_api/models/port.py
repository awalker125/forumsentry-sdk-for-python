# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Port(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, acl_policy=None, description=None, error_template=None, request_filter_policy=None):
        """
        Port - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'acl_policy': 'str',
            'description': 'str',
            'error_template': 'str',
            'request_filter_policy': 'str'
        }

        self.attribute_map = {
            'acl_policy': 'aclPolicy',
            'description': 'description',
            'error_template': 'errorTemplate',
            'request_filter_policy': 'requestFilterPolicy'
        }

        self._acl_policy = acl_policy
        self._description = description
        self._error_template = error_template
        self._request_filter_policy = request_filter_policy

    @property
    def acl_policy(self):
        """
        Gets the acl_policy of this Port.


        :return: The acl_policy of this Port.
        :rtype: str
        """
        return self._acl_policy

    @acl_policy.setter
    def acl_policy(self, acl_policy):
        """
        Sets the acl_policy of this Port.


        :param acl_policy: The acl_policy of this Port.
        :type: str
        """

        self._acl_policy = acl_policy

    @property
    def description(self):
        """
        Gets the description of this Port.


        :return: The description of this Port.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Port.


        :param description: The description of this Port.
        :type: str
        """

        self._description = description

    @property
    def error_template(self):
        """
        Gets the error_template of this Port.


        :return: The error_template of this Port.
        :rtype: str
        """
        return self._error_template

    @error_template.setter
    def error_template(self, error_template):
        """
        Sets the error_template of this Port.


        :param error_template: The error_template of this Port.
        :type: str
        """

        self._error_template = error_template

    @property
    def request_filter_policy(self):
        """
        Gets the request_filter_policy of this Port.


        :return: The request_filter_policy of this Port.
        :rtype: str
        """
        return self._request_filter_policy

    @request_filter_policy.setter
    def request_filter_policy(self, request_filter_policy):
        """
        Sets the request_filter_policy of this Port.


        :param request_filter_policy: The request_filter_policy of this Port.
        :type: str
        """

        self._request_filter_policy = request_filter_policy

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
