# coding: utf-8

"""

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class VirtualDirectory(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, description=None, listener_policy=None, remote_policy=None, virtual_path=None, remote_path=None, alt_protocol=None, alt_host=None, alt_port=None, virtual_host=None, enabled=None, use_alt_location=None):
        """
        VirtualDirectory - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'description': 'str',
            'listener_policy': 'str',
            'remote_policy': 'str',
            'virtual_path': 'str',
            'remote_path': 'str',
            'alt_protocol': 'str',
            'alt_host': 'str',
            'alt_port': 'int',
            'virtual_host': 'str',
            'enabled': 'bool',
            'use_alt_location': 'bool'
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'listener_policy': 'listenerPolicy',
            'remote_policy': 'remotePolicy',
            'virtual_path': 'virtualPath',
            'remote_path': 'remotePath',
            'alt_protocol': 'altProtocol',
            'alt_host': 'altHost',
            'alt_port': 'altPort',
            'virtual_host': 'virtualHost',
            'enabled': 'enabled',
            'use_alt_location': 'useAltLocation'
        }

        self._name = name
        self._description = description
        self._listener_policy = listener_policy
        self._remote_policy = remote_policy
        self._virtual_path = virtual_path
        self._remote_path = remote_path
        self._alt_protocol = alt_protocol
        self._alt_host = alt_host
        self._alt_port = alt_port
        self._virtual_host = virtual_host
        self._enabled = enabled
        self._use_alt_location = use_alt_location

    @property
    def name(self):
        """
        Gets the name of this VirtualDirectory.


        :return: The name of this VirtualDirectory.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this VirtualDirectory.


        :param name: The name of this VirtualDirectory.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this VirtualDirectory.


        :return: The description of this VirtualDirectory.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this VirtualDirectory.


        :param description: The description of this VirtualDirectory.
        :type: str
        """

        self._description = description

    @property
    def listener_policy(self):
        """
        Gets the listener_policy of this VirtualDirectory.


        :return: The listener_policy of this VirtualDirectory.
        :rtype: str
        """
        return self._listener_policy

    @listener_policy.setter
    def listener_policy(self, listener_policy):
        """
        Sets the listener_policy of this VirtualDirectory.


        :param listener_policy: The listener_policy of this VirtualDirectory.
        :type: str
        """

        self._listener_policy = listener_policy

    @property
    def remote_policy(self):
        """
        Gets the remote_policy of this VirtualDirectory.


        :return: The remote_policy of this VirtualDirectory.
        :rtype: str
        """
        return self._remote_policy

    @remote_policy.setter
    def remote_policy(self, remote_policy):
        """
        Sets the remote_policy of this VirtualDirectory.


        :param remote_policy: The remote_policy of this VirtualDirectory.
        :type: str
        """

        self._remote_policy = remote_policy

    @property
    def virtual_path(self):
        """
        Gets the virtual_path of this VirtualDirectory.


        :return: The virtual_path of this VirtualDirectory.
        :rtype: str
        """
        return self._virtual_path

    @virtual_path.setter
    def virtual_path(self, virtual_path):
        """
        Sets the virtual_path of this VirtualDirectory.


        :param virtual_path: The virtual_path of this VirtualDirectory.
        :type: str
        """

        self._virtual_path = virtual_path

    @property
    def remote_path(self):
        """
        Gets the remote_path of this VirtualDirectory.


        :return: The remote_path of this VirtualDirectory.
        :rtype: str
        """
        return self._remote_path

    @remote_path.setter
    def remote_path(self, remote_path):
        """
        Sets the remote_path of this VirtualDirectory.


        :param remote_path: The remote_path of this VirtualDirectory.
        :type: str
        """

        self._remote_path = remote_path

    @property
    def alt_protocol(self):
        """
        Gets the alt_protocol of this VirtualDirectory.


        :return: The alt_protocol of this VirtualDirectory.
        :rtype: str
        """
        return self._alt_protocol

    @alt_protocol.setter
    def alt_protocol(self, alt_protocol):
        """
        Sets the alt_protocol of this VirtualDirectory.


        :param alt_protocol: The alt_protocol of this VirtualDirectory.
        :type: str
        """
        allowed_values = ["", "http", "https"]
        if alt_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `alt_protocol` ({0}), must be one of {1}"
                .format(alt_protocol, allowed_values)
            )

        self._alt_protocol = alt_protocol

    @property
    def alt_host(self):
        """
        Gets the alt_host of this VirtualDirectory.


        :return: The alt_host of this VirtualDirectory.
        :rtype: str
        """
        return self._alt_host

    @alt_host.setter
    def alt_host(self, alt_host):
        """
        Sets the alt_host of this VirtualDirectory.


        :param alt_host: The alt_host of this VirtualDirectory.
        :type: str
        """

        self._alt_host = alt_host

    @property
    def alt_port(self):
        """
        Gets the alt_port of this VirtualDirectory.


        :return: The alt_port of this VirtualDirectory.
        :rtype: int
        """
        return self._alt_port

    @alt_port.setter
    def alt_port(self, alt_port):
        """
        Sets the alt_port of this VirtualDirectory.


        :param alt_port: The alt_port of this VirtualDirectory.
        :type: int
        """

        self._alt_port = alt_port

    @property
    def virtual_host(self):
        """
        Gets the virtual_host of this VirtualDirectory.


        :return: The virtual_host of this VirtualDirectory.
        :rtype: str
        """
        return self._virtual_host

    @virtual_host.setter
    def virtual_host(self, virtual_host):
        """
        Sets the virtual_host of this VirtualDirectory.


        :param virtual_host: The virtual_host of this VirtualDirectory.
        :type: str
        """

        self._virtual_host = virtual_host

    @property
    def enabled(self):
        """
        Gets the enabled of this VirtualDirectory.


        :return: The enabled of this VirtualDirectory.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this VirtualDirectory.


        :param enabled: The enabled of this VirtualDirectory.
        :type: bool
        """

        self._enabled = enabled

    @property
    def use_alt_location(self):
        """
        Gets the use_alt_location of this VirtualDirectory.


        :return: The use_alt_location of this VirtualDirectory.
        :rtype: bool
        """
        return self._use_alt_location

    @use_alt_location.setter
    def use_alt_location(self, use_alt_location):
        """
        Sets the use_alt_location of this VirtualDirectory.


        :param use_alt_location: The use_alt_location of this VirtualDirectory.
        :type: bool
        """

        self._use_alt_location = use_alt_location

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
