# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class WsdlPolicyUpgrade(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, port_information=None, wsdl_library=None, description=None, wsdl_port_name=None, wsdl_binding_name=None, wsdl_port_type_name=None, wsdl_definition_name=None, operations=None, user_name=None, password=None, wsdl_namespace=None, wsdl_source=None, wsdl_service_name=None, wsdl_url=None, name=None):
        """
        WsdlPolicyUpgrade - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'port_information': 'JSONArray',
            'wsdl_library': 'str',
            'description': 'str',
            'wsdl_port_name': 'str',
            'wsdl_binding_name': 'str',
            'wsdl_port_type_name': 'str',
            'wsdl_definition_name': 'str',
            'operations': 'list[str]',
            'user_name': 'str',
            'password': 'str',
            'wsdl_namespace': 'str',
            'wsdl_source': 'str',
            'wsdl_service_name': 'str',
            'wsdl_url': 'str',
            'name': 'str'
        }

        self.attribute_map = {
            'port_information': 'portInformation',
            'wsdl_library': 'wsdlLibrary',
            'description': 'description',
            'wsdl_port_name': 'wsdlPortName',
            'wsdl_binding_name': 'wsdlBindingName',
            'wsdl_port_type_name': 'wsdlPortTypeName',
            'wsdl_definition_name': 'wsdlDefinitionName',
            'operations': 'operations',
            'user_name': 'userName',
            'password': 'password',
            'wsdl_namespace': 'wsdlNamespace',
            'wsdl_source': 'wsdlSource',
            'wsdl_service_name': 'wsdlServiceName',
            'wsdl_url': 'wsdlUrl',
            'name': 'name'
        }

        self._port_information = port_information
        self._wsdl_library = wsdl_library
        self._description = description
        self._wsdl_port_name = wsdl_port_name
        self._wsdl_binding_name = wsdl_binding_name
        self._wsdl_port_type_name = wsdl_port_type_name
        self._wsdl_definition_name = wsdl_definition_name
        self._operations = operations
        self._user_name = user_name
        self._password = password
        self._wsdl_namespace = wsdl_namespace
        self._wsdl_source = wsdl_source
        self._wsdl_service_name = wsdl_service_name
        self._wsdl_url = wsdl_url
        self._name = name

    @property
    def port_information(self):
        """
        Gets the port_information of this WsdlPolicyUpgrade.


        :return: The port_information of this WsdlPolicyUpgrade.
        :rtype: JSONArray
        """
        return self._port_information

    @port_information.setter
    def port_information(self, port_information):
        """
        Sets the port_information of this WsdlPolicyUpgrade.


        :param port_information: The port_information of this WsdlPolicyUpgrade.
        :type: JSONArray
        """

        self._port_information = port_information

    @property
    def wsdl_library(self):
        """
        Gets the wsdl_library of this WsdlPolicyUpgrade.


        :return: The wsdl_library of this WsdlPolicyUpgrade.
        :rtype: str
        """
        return self._wsdl_library

    @wsdl_library.setter
    def wsdl_library(self, wsdl_library):
        """
        Sets the wsdl_library of this WsdlPolicyUpgrade.


        :param wsdl_library: The wsdl_library of this WsdlPolicyUpgrade.
        :type: str
        """

        self._wsdl_library = wsdl_library

    @property
    def description(self):
        """
        Gets the description of this WsdlPolicyUpgrade.


        :return: The description of this WsdlPolicyUpgrade.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this WsdlPolicyUpgrade.


        :param description: The description of this WsdlPolicyUpgrade.
        :type: str
        """

        self._description = description

    @property
    def wsdl_port_name(self):
        """
        Gets the wsdl_port_name of this WsdlPolicyUpgrade.


        :return: The wsdl_port_name of this WsdlPolicyUpgrade.
        :rtype: str
        """
        return self._wsdl_port_name

    @wsdl_port_name.setter
    def wsdl_port_name(self, wsdl_port_name):
        """
        Sets the wsdl_port_name of this WsdlPolicyUpgrade.


        :param wsdl_port_name: The wsdl_port_name of this WsdlPolicyUpgrade.
        :type: str
        """

        self._wsdl_port_name = wsdl_port_name

    @property
    def wsdl_binding_name(self):
        """
        Gets the wsdl_binding_name of this WsdlPolicyUpgrade.


        :return: The wsdl_binding_name of this WsdlPolicyUpgrade.
        :rtype: str
        """
        return self._wsdl_binding_name

    @wsdl_binding_name.setter
    def wsdl_binding_name(self, wsdl_binding_name):
        """
        Sets the wsdl_binding_name of this WsdlPolicyUpgrade.


        :param wsdl_binding_name: The wsdl_binding_name of this WsdlPolicyUpgrade.
        :type: str
        """

        self._wsdl_binding_name = wsdl_binding_name

    @property
    def wsdl_port_type_name(self):
        """
        Gets the wsdl_port_type_name of this WsdlPolicyUpgrade.


        :return: The wsdl_port_type_name of this WsdlPolicyUpgrade.
        :rtype: str
        """
        return self._wsdl_port_type_name

    @wsdl_port_type_name.setter
    def wsdl_port_type_name(self, wsdl_port_type_name):
        """
        Sets the wsdl_port_type_name of this WsdlPolicyUpgrade.


        :param wsdl_port_type_name: The wsdl_port_type_name of this WsdlPolicyUpgrade.
        :type: str
        """

        self._wsdl_port_type_name = wsdl_port_type_name

    @property
    def wsdl_definition_name(self):
        """
        Gets the wsdl_definition_name of this WsdlPolicyUpgrade.


        :return: The wsdl_definition_name of this WsdlPolicyUpgrade.
        :rtype: str
        """
        return self._wsdl_definition_name

    @wsdl_definition_name.setter
    def wsdl_definition_name(self, wsdl_definition_name):
        """
        Sets the wsdl_definition_name of this WsdlPolicyUpgrade.


        :param wsdl_definition_name: The wsdl_definition_name of this WsdlPolicyUpgrade.
        :type: str
        """

        self._wsdl_definition_name = wsdl_definition_name

    @property
    def operations(self):
        """
        Gets the operations of this WsdlPolicyUpgrade.


        :return: The operations of this WsdlPolicyUpgrade.
        :rtype: list[str]
        """
        return self._operations

    @operations.setter
    def operations(self, operations):
        """
        Sets the operations of this WsdlPolicyUpgrade.


        :param operations: The operations of this WsdlPolicyUpgrade.
        :type: list[str]
        """

        self._operations = operations

    @property
    def user_name(self):
        """
        Gets the user_name of this WsdlPolicyUpgrade.


        :return: The user_name of this WsdlPolicyUpgrade.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """
        Sets the user_name of this WsdlPolicyUpgrade.


        :param user_name: The user_name of this WsdlPolicyUpgrade.
        :type: str
        """

        self._user_name = user_name

    @property
    def password(self):
        """
        Gets the password of this WsdlPolicyUpgrade.


        :return: The password of this WsdlPolicyUpgrade.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this WsdlPolicyUpgrade.


        :param password: The password of this WsdlPolicyUpgrade.
        :type: str
        """

        self._password = password

    @property
    def wsdl_namespace(self):
        """
        Gets the wsdl_namespace of this WsdlPolicyUpgrade.


        :return: The wsdl_namespace of this WsdlPolicyUpgrade.
        :rtype: str
        """
        return self._wsdl_namespace

    @wsdl_namespace.setter
    def wsdl_namespace(self, wsdl_namespace):
        """
        Sets the wsdl_namespace of this WsdlPolicyUpgrade.


        :param wsdl_namespace: The wsdl_namespace of this WsdlPolicyUpgrade.
        :type: str
        """

        self._wsdl_namespace = wsdl_namespace

    @property
    def wsdl_source(self):
        """
        Gets the wsdl_source of this WsdlPolicyUpgrade.


        :return: The wsdl_source of this WsdlPolicyUpgrade.
        :rtype: str
        """
        return self._wsdl_source

    @wsdl_source.setter
    def wsdl_source(self, wsdl_source):
        """
        Sets the wsdl_source of this WsdlPolicyUpgrade.


        :param wsdl_source: The wsdl_source of this WsdlPolicyUpgrade.
        :type: str
        """
        allowed_values = ["URL", "WSDL Library"]
        if wsdl_source not in allowed_values:
            raise ValueError(
                "Invalid value for `wsdl_source` ({0}), must be one of {1}"
                .format(wsdl_source, allowed_values)
            )

        self._wsdl_source = wsdl_source

    @property
    def wsdl_service_name(self):
        """
        Gets the wsdl_service_name of this WsdlPolicyUpgrade.


        :return: The wsdl_service_name of this WsdlPolicyUpgrade.
        :rtype: str
        """
        return self._wsdl_service_name

    @wsdl_service_name.setter
    def wsdl_service_name(self, wsdl_service_name):
        """
        Sets the wsdl_service_name of this WsdlPolicyUpgrade.


        :param wsdl_service_name: The wsdl_service_name of this WsdlPolicyUpgrade.
        :type: str
        """

        self._wsdl_service_name = wsdl_service_name

    @property
    def wsdl_url(self):
        """
        Gets the wsdl_url of this WsdlPolicyUpgrade.


        :return: The wsdl_url of this WsdlPolicyUpgrade.
        :rtype: str
        """
        return self._wsdl_url

    @wsdl_url.setter
    def wsdl_url(self, wsdl_url):
        """
        Sets the wsdl_url of this WsdlPolicyUpgrade.


        :param wsdl_url: The wsdl_url of this WsdlPolicyUpgrade.
        :type: str
        """

        self._wsdl_url = wsdl_url

    @property
    def name(self):
        """
        Gets the name of this WsdlPolicyUpgrade.


        :return: The name of this WsdlPolicyUpgrade.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this WsdlPolicyUpgrade.


        :param name: The name of this WsdlPolicyUpgrade.
        :type: str
        """

        self._name = name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
