# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Amqp10ListenerPolicy1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acl_policy': 'str',
        'ip_acl_policy': 'str',
        'read_timeout_millis': 'int',
        'ip': 'str',
        'port': 'int',
        'use_device_ip': 'bool',
        'name': 'str',
        'sasl_mechanism': 'str',
        'use_ssl': 'bool',
        'description': 'str',
        'enabled': 'bool',
        'interface': 'str',
        'error_template': 'str',
        'ssl_policy': 'str'
    }

    attribute_map = {
        'acl_policy': 'aclPolicy',
        'ip_acl_policy': 'ipAclPolicy',
        'read_timeout_millis': 'readTimeoutMillis',
        'ip': 'ip',
        'port': 'port',
        'use_device_ip': 'useDeviceIp',
        'name': 'name',
        'sasl_mechanism': 'saslMechanism',
        'use_ssl': 'useSsl',
        'description': 'description',
        'enabled': 'enabled',
        'interface': 'interface',
        'error_template': 'errorTemplate',
        'ssl_policy': 'sslPolicy'
    }

    def __init__(self, acl_policy=None, ip_acl_policy=None, read_timeout_millis=None, ip=None, port=None, use_device_ip=None, name=None, sasl_mechanism=None, use_ssl=None, description=None, enabled=None, interface=None, error_template=None, ssl_policy=None):  # noqa: E501
        """Amqp10ListenerPolicy1 - a model defined in Swagger"""  # noqa: E501

        self._acl_policy = None
        self._ip_acl_policy = None
        self._read_timeout_millis = None
        self._ip = None
        self._port = None
        self._use_device_ip = None
        self._name = None
        self._sasl_mechanism = None
        self._use_ssl = None
        self._description = None
        self._enabled = None
        self._interface = None
        self._error_template = None
        self._ssl_policy = None
        self.discriminator = None

        if acl_policy is not None:
            self.acl_policy = acl_policy
        if ip_acl_policy is not None:
            self.ip_acl_policy = ip_acl_policy
        if read_timeout_millis is not None:
            self.read_timeout_millis = read_timeout_millis
        if ip is not None:
            self.ip = ip
        if port is not None:
            self.port = port
        if use_device_ip is not None:
            self.use_device_ip = use_device_ip
        self.name = name
        if sasl_mechanism is not None:
            self.sasl_mechanism = sasl_mechanism
        if use_ssl is not None:
            self.use_ssl = use_ssl
        if description is not None:
            self.description = description
        if enabled is not None:
            self.enabled = enabled
        if interface is not None:
            self.interface = interface
        if error_template is not None:
            self.error_template = error_template
        if ssl_policy is not None:
            self.ssl_policy = ssl_policy

    @property
    def acl_policy(self):
        """Gets the acl_policy of this Amqp10ListenerPolicy1.  # noqa: E501


        :return: The acl_policy of this Amqp10ListenerPolicy1.  # noqa: E501
        :rtype: str
        """
        return self._acl_policy

    @acl_policy.setter
    def acl_policy(self, acl_policy):
        """Sets the acl_policy of this Amqp10ListenerPolicy1.


        :param acl_policy: The acl_policy of this Amqp10ListenerPolicy1.  # noqa: E501
        :type: str
        """

        self._acl_policy = acl_policy

    @property
    def ip_acl_policy(self):
        """Gets the ip_acl_policy of this Amqp10ListenerPolicy1.  # noqa: E501


        :return: The ip_acl_policy of this Amqp10ListenerPolicy1.  # noqa: E501
        :rtype: str
        """
        return self._ip_acl_policy

    @ip_acl_policy.setter
    def ip_acl_policy(self, ip_acl_policy):
        """Sets the ip_acl_policy of this Amqp10ListenerPolicy1.


        :param ip_acl_policy: The ip_acl_policy of this Amqp10ListenerPolicy1.  # noqa: E501
        :type: str
        """

        self._ip_acl_policy = ip_acl_policy

    @property
    def read_timeout_millis(self):
        """Gets the read_timeout_millis of this Amqp10ListenerPolicy1.  # noqa: E501


        :return: The read_timeout_millis of this Amqp10ListenerPolicy1.  # noqa: E501
        :rtype: int
        """
        return self._read_timeout_millis

    @read_timeout_millis.setter
    def read_timeout_millis(self, read_timeout_millis):
        """Sets the read_timeout_millis of this Amqp10ListenerPolicy1.


        :param read_timeout_millis: The read_timeout_millis of this Amqp10ListenerPolicy1.  # noqa: E501
        :type: int
        """

        self._read_timeout_millis = read_timeout_millis

    @property
    def ip(self):
        """Gets the ip of this Amqp10ListenerPolicy1.  # noqa: E501


        :return: The ip of this Amqp10ListenerPolicy1.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this Amqp10ListenerPolicy1.


        :param ip: The ip of this Amqp10ListenerPolicy1.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def port(self):
        """Gets the port of this Amqp10ListenerPolicy1.  # noqa: E501


        :return: The port of this Amqp10ListenerPolicy1.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Amqp10ListenerPolicy1.


        :param port: The port of this Amqp10ListenerPolicy1.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def use_device_ip(self):
        """Gets the use_device_ip of this Amqp10ListenerPolicy1.  # noqa: E501


        :return: The use_device_ip of this Amqp10ListenerPolicy1.  # noqa: E501
        :rtype: bool
        """
        return self._use_device_ip

    @use_device_ip.setter
    def use_device_ip(self, use_device_ip):
        """Sets the use_device_ip of this Amqp10ListenerPolicy1.


        :param use_device_ip: The use_device_ip of this Amqp10ListenerPolicy1.  # noqa: E501
        :type: bool
        """

        self._use_device_ip = use_device_ip

    @property
    def name(self):
        """Gets the name of this Amqp10ListenerPolicy1.  # noqa: E501


        :return: The name of this Amqp10ListenerPolicy1.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Amqp10ListenerPolicy1.


        :param name: The name of this Amqp10ListenerPolicy1.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def sasl_mechanism(self):
        """Gets the sasl_mechanism of this Amqp10ListenerPolicy1.  # noqa: E501


        :return: The sasl_mechanism of this Amqp10ListenerPolicy1.  # noqa: E501
        :rtype: str
        """
        return self._sasl_mechanism

    @sasl_mechanism.setter
    def sasl_mechanism(self, sasl_mechanism):
        """Sets the sasl_mechanism of this Amqp10ListenerPolicy1.


        :param sasl_mechanism: The sasl_mechanism of this Amqp10ListenerPolicy1.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "ANONYMOUS", "PLAIN", "CRAM_MD5", "EXTERNAL"]  # noqa: E501
        if sasl_mechanism not in allowed_values:
            raise ValueError(
                "Invalid value for `sasl_mechanism` ({0}), must be one of {1}"  # noqa: E501
                .format(sasl_mechanism, allowed_values)
            )

        self._sasl_mechanism = sasl_mechanism

    @property
    def use_ssl(self):
        """Gets the use_ssl of this Amqp10ListenerPolicy1.  # noqa: E501


        :return: The use_ssl of this Amqp10ListenerPolicy1.  # noqa: E501
        :rtype: bool
        """
        return self._use_ssl

    @use_ssl.setter
    def use_ssl(self, use_ssl):
        """Sets the use_ssl of this Amqp10ListenerPolicy1.


        :param use_ssl: The use_ssl of this Amqp10ListenerPolicy1.  # noqa: E501
        :type: bool
        """

        self._use_ssl = use_ssl

    @property
    def description(self):
        """Gets the description of this Amqp10ListenerPolicy1.  # noqa: E501


        :return: The description of this Amqp10ListenerPolicy1.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Amqp10ListenerPolicy1.


        :param description: The description of this Amqp10ListenerPolicy1.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def enabled(self):
        """Gets the enabled of this Amqp10ListenerPolicy1.  # noqa: E501


        :return: The enabled of this Amqp10ListenerPolicy1.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Amqp10ListenerPolicy1.


        :param enabled: The enabled of this Amqp10ListenerPolicy1.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def interface(self):
        """Gets the interface of this Amqp10ListenerPolicy1.  # noqa: E501


        :return: The interface of this Amqp10ListenerPolicy1.  # noqa: E501
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this Amqp10ListenerPolicy1.


        :param interface: The interface of this Amqp10ListenerPolicy1.  # noqa: E501
        :type: str
        """
        allowed_values = ["WAN", "LAN"]  # noqa: E501
        if interface not in allowed_values:
            raise ValueError(
                "Invalid value for `interface` ({0}), must be one of {1}"  # noqa: E501
                .format(interface, allowed_values)
            )

        self._interface = interface

    @property
    def error_template(self):
        """Gets the error_template of this Amqp10ListenerPolicy1.  # noqa: E501


        :return: The error_template of this Amqp10ListenerPolicy1.  # noqa: E501
        :rtype: str
        """
        return self._error_template

    @error_template.setter
    def error_template(self, error_template):
        """Sets the error_template of this Amqp10ListenerPolicy1.


        :param error_template: The error_template of this Amqp10ListenerPolicy1.  # noqa: E501
        :type: str
        """

        self._error_template = error_template

    @property
    def ssl_policy(self):
        """Gets the ssl_policy of this Amqp10ListenerPolicy1.  # noqa: E501


        :return: The ssl_policy of this Amqp10ListenerPolicy1.  # noqa: E501
        :rtype: str
        """
        return self._ssl_policy

    @ssl_policy.setter
    def ssl_policy(self, ssl_policy):
        """Sets the ssl_policy of this Amqp10ListenerPolicy1.


        :param ssl_policy: The ssl_policy of this Amqp10ListenerPolicy1.  # noqa: E501
        :type: str
        """

        self._ssl_policy = ssl_policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Amqp10ListenerPolicy1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
