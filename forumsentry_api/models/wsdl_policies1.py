# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from forumsentry_api.models.json_array import JSONArray  # noqa: F401,E501


class WsdlPolicies1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'port_information': 'JSONArray',
        'process_request': 'bool',
        'wsdl_library': 'str',
        'wsdl_port_name': 'str',
        'post_response_process_type': 'str',
        'wsdl_binding_name': 'str',
        'body_validation': 'bool',
        'wsdl_port_type_name': 'str',
        'user_name': 'str',
        'wsdl_source': 'str',
        'wsdl_url': 'str',
        'name': 'str',
        'post_response_process': 'str',
        'post_request_process_type': 'str',
        'header_validation': 'bool',
        'description': 'str',
        'request_process_type': 'str',
        'post_process_response': 'bool',
        'wsdl_definition_name': 'str',
        'wsi_validation': 'bool',
        'post_process_request': 'bool',
        'operations': 'list[str]',
        'post_request_process': 'str',
        'response_process_type': 'str',
        'idp_group': 'str',
        'password': 'str',
        'process_response': 'bool',
        'request_process': 'str',
        'allow_additional_headers': 'bool',
        'wsdl_namespace': 'str',
        'response_process': 'str',
        'wsdl_service_name': 'str',
        'envelope_validation': 'bool'
    }

    attribute_map = {
        'port_information': 'portInformation',
        'process_request': 'processRequest',
        'wsdl_library': 'wsdlLibrary',
        'wsdl_port_name': 'wsdlPortName',
        'post_response_process_type': 'postResponseProcessType',
        'wsdl_binding_name': 'wsdlBindingName',
        'body_validation': 'bodyValidation',
        'wsdl_port_type_name': 'wsdlPortTypeName',
        'user_name': 'userName',
        'wsdl_source': 'wsdlSource',
        'wsdl_url': 'wsdlUrl',
        'name': 'name',
        'post_response_process': 'postResponseProcess',
        'post_request_process_type': 'postRequestProcessType',
        'header_validation': 'headerValidation',
        'description': 'description',
        'request_process_type': 'requestProcessType',
        'post_process_response': 'postProcessResponse',
        'wsdl_definition_name': 'wsdlDefinitionName',
        'wsi_validation': 'wsiValidation',
        'post_process_request': 'postProcessRequest',
        'operations': 'operations',
        'post_request_process': 'postRequestProcess',
        'response_process_type': 'responseProcessType',
        'idp_group': 'idpGroup',
        'password': 'password',
        'process_response': 'processResponse',
        'request_process': 'requestProcess',
        'allow_additional_headers': 'allowAdditionalHeaders',
        'wsdl_namespace': 'wsdlNamespace',
        'response_process': 'responseProcess',
        'wsdl_service_name': 'wsdlServiceName',
        'envelope_validation': 'envelopeValidation'
    }

    def __init__(self, port_information=None, process_request=None, wsdl_library=None, wsdl_port_name=None, post_response_process_type=None, wsdl_binding_name=None, body_validation=None, wsdl_port_type_name=None, user_name=None, wsdl_source=None, wsdl_url=None, name=None, post_response_process=None, post_request_process_type=None, header_validation=None, description=None, request_process_type=None, post_process_response=None, wsdl_definition_name=None, wsi_validation=None, post_process_request=None, operations=None, post_request_process=None, response_process_type=None, idp_group=None, password=None, process_response=None, request_process=None, allow_additional_headers=None, wsdl_namespace=None, response_process=None, wsdl_service_name=None, envelope_validation=None):  # noqa: E501
        """WsdlPolicies1 - a model defined in Swagger"""  # noqa: E501

        self._port_information = None
        self._process_request = None
        self._wsdl_library = None
        self._wsdl_port_name = None
        self._post_response_process_type = None
        self._wsdl_binding_name = None
        self._body_validation = None
        self._wsdl_port_type_name = None
        self._user_name = None
        self._wsdl_source = None
        self._wsdl_url = None
        self._name = None
        self._post_response_process = None
        self._post_request_process_type = None
        self._header_validation = None
        self._description = None
        self._request_process_type = None
        self._post_process_response = None
        self._wsdl_definition_name = None
        self._wsi_validation = None
        self._post_process_request = None
        self._operations = None
        self._post_request_process = None
        self._response_process_type = None
        self._idp_group = None
        self._password = None
        self._process_response = None
        self._request_process = None
        self._allow_additional_headers = None
        self._wsdl_namespace = None
        self._response_process = None
        self._wsdl_service_name = None
        self._envelope_validation = None
        self.discriminator = None

        self.port_information = port_information
        if process_request is not None:
            self.process_request = process_request
        if wsdl_library is not None:
            self.wsdl_library = wsdl_library
        if wsdl_port_name is not None:
            self.wsdl_port_name = wsdl_port_name
        if post_response_process_type is not None:
            self.post_response_process_type = post_response_process_type
        if wsdl_binding_name is not None:
            self.wsdl_binding_name = wsdl_binding_name
        if body_validation is not None:
            self.body_validation = body_validation
        if wsdl_port_type_name is not None:
            self.wsdl_port_type_name = wsdl_port_type_name
        if user_name is not None:
            self.user_name = user_name
        self.wsdl_source = wsdl_source
        if wsdl_url is not None:
            self.wsdl_url = wsdl_url
        self.name = name
        if post_response_process is not None:
            self.post_response_process = post_response_process
        if post_request_process_type is not None:
            self.post_request_process_type = post_request_process_type
        if header_validation is not None:
            self.header_validation = header_validation
        if description is not None:
            self.description = description
        if request_process_type is not None:
            self.request_process_type = request_process_type
        if post_process_response is not None:
            self.post_process_response = post_process_response
        if wsdl_definition_name is not None:
            self.wsdl_definition_name = wsdl_definition_name
        if wsi_validation is not None:
            self.wsi_validation = wsi_validation
        if post_process_request is not None:
            self.post_process_request = post_process_request
        if operations is not None:
            self.operations = operations
        if post_request_process is not None:
            self.post_request_process = post_request_process
        if response_process_type is not None:
            self.response_process_type = response_process_type
        if idp_group is not None:
            self.idp_group = idp_group
        if password is not None:
            self.password = password
        if process_response is not None:
            self.process_response = process_response
        if request_process is not None:
            self.request_process = request_process
        if allow_additional_headers is not None:
            self.allow_additional_headers = allow_additional_headers
        if wsdl_namespace is not None:
            self.wsdl_namespace = wsdl_namespace
        if response_process is not None:
            self.response_process = response_process
        if wsdl_service_name is not None:
            self.wsdl_service_name = wsdl_service_name
        if envelope_validation is not None:
            self.envelope_validation = envelope_validation

    @property
    def port_information(self):
        """Gets the port_information of this WsdlPolicies1.  # noqa: E501


        :return: The port_information of this WsdlPolicies1.  # noqa: E501
        :rtype: JSONArray
        """
        return self._port_information

    @port_information.setter
    def port_information(self, port_information):
        """Sets the port_information of this WsdlPolicies1.


        :param port_information: The port_information of this WsdlPolicies1.  # noqa: E501
        :type: JSONArray
        """
        if port_information is None:
            raise ValueError("Invalid value for `port_information`, must not be `None`")  # noqa: E501

        self._port_information = port_information

    @property
    def process_request(self):
        """Gets the process_request of this WsdlPolicies1.  # noqa: E501


        :return: The process_request of this WsdlPolicies1.  # noqa: E501
        :rtype: bool
        """
        return self._process_request

    @process_request.setter
    def process_request(self, process_request):
        """Sets the process_request of this WsdlPolicies1.


        :param process_request: The process_request of this WsdlPolicies1.  # noqa: E501
        :type: bool
        """

        self._process_request = process_request

    @property
    def wsdl_library(self):
        """Gets the wsdl_library of this WsdlPolicies1.  # noqa: E501


        :return: The wsdl_library of this WsdlPolicies1.  # noqa: E501
        :rtype: str
        """
        return self._wsdl_library

    @wsdl_library.setter
    def wsdl_library(self, wsdl_library):
        """Sets the wsdl_library of this WsdlPolicies1.


        :param wsdl_library: The wsdl_library of this WsdlPolicies1.  # noqa: E501
        :type: str
        """

        self._wsdl_library = wsdl_library

    @property
    def wsdl_port_name(self):
        """Gets the wsdl_port_name of this WsdlPolicies1.  # noqa: E501


        :return: The wsdl_port_name of this WsdlPolicies1.  # noqa: E501
        :rtype: str
        """
        return self._wsdl_port_name

    @wsdl_port_name.setter
    def wsdl_port_name(self, wsdl_port_name):
        """Sets the wsdl_port_name of this WsdlPolicies1.


        :param wsdl_port_name: The wsdl_port_name of this WsdlPolicies1.  # noqa: E501
        :type: str
        """

        self._wsdl_port_name = wsdl_port_name

    @property
    def post_response_process_type(self):
        """Gets the post_response_process_type of this WsdlPolicies1.  # noqa: E501


        :return: The post_response_process_type of this WsdlPolicies1.  # noqa: E501
        :rtype: str
        """
        return self._post_response_process_type

    @post_response_process_type.setter
    def post_response_process_type(self, post_response_process_type):
        """Sets the post_response_process_type of this WsdlPolicies1.


        :param post_response_process_type: The post_response_process_type of this WsdlPolicies1.  # noqa: E501
        :type: str
        """
        allowed_values = ["TASK_LIST", "TASK_LIST_GROUP"]  # noqa: E501
        if post_response_process_type not in allowed_values:
            raise ValueError(
                "Invalid value for `post_response_process_type` ({0}), must be one of {1}"  # noqa: E501
                .format(post_response_process_type, allowed_values)
            )

        self._post_response_process_type = post_response_process_type

    @property
    def wsdl_binding_name(self):
        """Gets the wsdl_binding_name of this WsdlPolicies1.  # noqa: E501


        :return: The wsdl_binding_name of this WsdlPolicies1.  # noqa: E501
        :rtype: str
        """
        return self._wsdl_binding_name

    @wsdl_binding_name.setter
    def wsdl_binding_name(self, wsdl_binding_name):
        """Sets the wsdl_binding_name of this WsdlPolicies1.


        :param wsdl_binding_name: The wsdl_binding_name of this WsdlPolicies1.  # noqa: E501
        :type: str
        """

        self._wsdl_binding_name = wsdl_binding_name

    @property
    def body_validation(self):
        """Gets the body_validation of this WsdlPolicies1.  # noqa: E501


        :return: The body_validation of this WsdlPolicies1.  # noqa: E501
        :rtype: bool
        """
        return self._body_validation

    @body_validation.setter
    def body_validation(self, body_validation):
        """Sets the body_validation of this WsdlPolicies1.


        :param body_validation: The body_validation of this WsdlPolicies1.  # noqa: E501
        :type: bool
        """

        self._body_validation = body_validation

    @property
    def wsdl_port_type_name(self):
        """Gets the wsdl_port_type_name of this WsdlPolicies1.  # noqa: E501


        :return: The wsdl_port_type_name of this WsdlPolicies1.  # noqa: E501
        :rtype: str
        """
        return self._wsdl_port_type_name

    @wsdl_port_type_name.setter
    def wsdl_port_type_name(self, wsdl_port_type_name):
        """Sets the wsdl_port_type_name of this WsdlPolicies1.


        :param wsdl_port_type_name: The wsdl_port_type_name of this WsdlPolicies1.  # noqa: E501
        :type: str
        """

        self._wsdl_port_type_name = wsdl_port_type_name

    @property
    def user_name(self):
        """Gets the user_name of this WsdlPolicies1.  # noqa: E501


        :return: The user_name of this WsdlPolicies1.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this WsdlPolicies1.


        :param user_name: The user_name of this WsdlPolicies1.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def wsdl_source(self):
        """Gets the wsdl_source of this WsdlPolicies1.  # noqa: E501


        :return: The wsdl_source of this WsdlPolicies1.  # noqa: E501
        :rtype: str
        """
        return self._wsdl_source

    @wsdl_source.setter
    def wsdl_source(self, wsdl_source):
        """Sets the wsdl_source of this WsdlPolicies1.


        :param wsdl_source: The wsdl_source of this WsdlPolicies1.  # noqa: E501
        :type: str
        """
        if wsdl_source is None:
            raise ValueError("Invalid value for `wsdl_source`, must not be `None`")  # noqa: E501
        allowed_values = ["URL", "WSDL Library"]  # noqa: E501
        if wsdl_source not in allowed_values:
            raise ValueError(
                "Invalid value for `wsdl_source` ({0}), must be one of {1}"  # noqa: E501
                .format(wsdl_source, allowed_values)
            )

        self._wsdl_source = wsdl_source

    @property
    def wsdl_url(self):
        """Gets the wsdl_url of this WsdlPolicies1.  # noqa: E501


        :return: The wsdl_url of this WsdlPolicies1.  # noqa: E501
        :rtype: str
        """
        return self._wsdl_url

    @wsdl_url.setter
    def wsdl_url(self, wsdl_url):
        """Sets the wsdl_url of this WsdlPolicies1.


        :param wsdl_url: The wsdl_url of this WsdlPolicies1.  # noqa: E501
        :type: str
        """

        self._wsdl_url = wsdl_url

    @property
    def name(self):
        """Gets the name of this WsdlPolicies1.  # noqa: E501


        :return: The name of this WsdlPolicies1.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WsdlPolicies1.


        :param name: The name of this WsdlPolicies1.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def post_response_process(self):
        """Gets the post_response_process of this WsdlPolicies1.  # noqa: E501


        :return: The post_response_process of this WsdlPolicies1.  # noqa: E501
        :rtype: str
        """
        return self._post_response_process

    @post_response_process.setter
    def post_response_process(self, post_response_process):
        """Sets the post_response_process of this WsdlPolicies1.


        :param post_response_process: The post_response_process of this WsdlPolicies1.  # noqa: E501
        :type: str
        """

        self._post_response_process = post_response_process

    @property
    def post_request_process_type(self):
        """Gets the post_request_process_type of this WsdlPolicies1.  # noqa: E501


        :return: The post_request_process_type of this WsdlPolicies1.  # noqa: E501
        :rtype: str
        """
        return self._post_request_process_type

    @post_request_process_type.setter
    def post_request_process_type(self, post_request_process_type):
        """Sets the post_request_process_type of this WsdlPolicies1.


        :param post_request_process_type: The post_request_process_type of this WsdlPolicies1.  # noqa: E501
        :type: str
        """
        allowed_values = ["TASK_LIST", "TASK_LIST_GROUP"]  # noqa: E501
        if post_request_process_type not in allowed_values:
            raise ValueError(
                "Invalid value for `post_request_process_type` ({0}), must be one of {1}"  # noqa: E501
                .format(post_request_process_type, allowed_values)
            )

        self._post_request_process_type = post_request_process_type

    @property
    def header_validation(self):
        """Gets the header_validation of this WsdlPolicies1.  # noqa: E501


        :return: The header_validation of this WsdlPolicies1.  # noqa: E501
        :rtype: bool
        """
        return self._header_validation

    @header_validation.setter
    def header_validation(self, header_validation):
        """Sets the header_validation of this WsdlPolicies1.


        :param header_validation: The header_validation of this WsdlPolicies1.  # noqa: E501
        :type: bool
        """

        self._header_validation = header_validation

    @property
    def description(self):
        """Gets the description of this WsdlPolicies1.  # noqa: E501


        :return: The description of this WsdlPolicies1.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WsdlPolicies1.


        :param description: The description of this WsdlPolicies1.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def request_process_type(self):
        """Gets the request_process_type of this WsdlPolicies1.  # noqa: E501


        :return: The request_process_type of this WsdlPolicies1.  # noqa: E501
        :rtype: str
        """
        return self._request_process_type

    @request_process_type.setter
    def request_process_type(self, request_process_type):
        """Sets the request_process_type of this WsdlPolicies1.


        :param request_process_type: The request_process_type of this WsdlPolicies1.  # noqa: E501
        :type: str
        """
        allowed_values = ["TASK_LIST", "TASK_LIST_GROUP"]  # noqa: E501
        if request_process_type not in allowed_values:
            raise ValueError(
                "Invalid value for `request_process_type` ({0}), must be one of {1}"  # noqa: E501
                .format(request_process_type, allowed_values)
            )

        self._request_process_type = request_process_type

    @property
    def post_process_response(self):
        """Gets the post_process_response of this WsdlPolicies1.  # noqa: E501


        :return: The post_process_response of this WsdlPolicies1.  # noqa: E501
        :rtype: bool
        """
        return self._post_process_response

    @post_process_response.setter
    def post_process_response(self, post_process_response):
        """Sets the post_process_response of this WsdlPolicies1.


        :param post_process_response: The post_process_response of this WsdlPolicies1.  # noqa: E501
        :type: bool
        """

        self._post_process_response = post_process_response

    @property
    def wsdl_definition_name(self):
        """Gets the wsdl_definition_name of this WsdlPolicies1.  # noqa: E501


        :return: The wsdl_definition_name of this WsdlPolicies1.  # noqa: E501
        :rtype: str
        """
        return self._wsdl_definition_name

    @wsdl_definition_name.setter
    def wsdl_definition_name(self, wsdl_definition_name):
        """Sets the wsdl_definition_name of this WsdlPolicies1.


        :param wsdl_definition_name: The wsdl_definition_name of this WsdlPolicies1.  # noqa: E501
        :type: str
        """

        self._wsdl_definition_name = wsdl_definition_name

    @property
    def wsi_validation(self):
        """Gets the wsi_validation of this WsdlPolicies1.  # noqa: E501


        :return: The wsi_validation of this WsdlPolicies1.  # noqa: E501
        :rtype: bool
        """
        return self._wsi_validation

    @wsi_validation.setter
    def wsi_validation(self, wsi_validation):
        """Sets the wsi_validation of this WsdlPolicies1.


        :param wsi_validation: The wsi_validation of this WsdlPolicies1.  # noqa: E501
        :type: bool
        """

        self._wsi_validation = wsi_validation

    @property
    def post_process_request(self):
        """Gets the post_process_request of this WsdlPolicies1.  # noqa: E501


        :return: The post_process_request of this WsdlPolicies1.  # noqa: E501
        :rtype: bool
        """
        return self._post_process_request

    @post_process_request.setter
    def post_process_request(self, post_process_request):
        """Sets the post_process_request of this WsdlPolicies1.


        :param post_process_request: The post_process_request of this WsdlPolicies1.  # noqa: E501
        :type: bool
        """

        self._post_process_request = post_process_request

    @property
    def operations(self):
        """Gets the operations of this WsdlPolicies1.  # noqa: E501


        :return: The operations of this WsdlPolicies1.  # noqa: E501
        :rtype: list[str]
        """
        return self._operations

    @operations.setter
    def operations(self, operations):
        """Sets the operations of this WsdlPolicies1.


        :param operations: The operations of this WsdlPolicies1.  # noqa: E501
        :type: list[str]
        """

        self._operations = operations

    @property
    def post_request_process(self):
        """Gets the post_request_process of this WsdlPolicies1.  # noqa: E501


        :return: The post_request_process of this WsdlPolicies1.  # noqa: E501
        :rtype: str
        """
        return self._post_request_process

    @post_request_process.setter
    def post_request_process(self, post_request_process):
        """Sets the post_request_process of this WsdlPolicies1.


        :param post_request_process: The post_request_process of this WsdlPolicies1.  # noqa: E501
        :type: str
        """

        self._post_request_process = post_request_process

    @property
    def response_process_type(self):
        """Gets the response_process_type of this WsdlPolicies1.  # noqa: E501


        :return: The response_process_type of this WsdlPolicies1.  # noqa: E501
        :rtype: str
        """
        return self._response_process_type

    @response_process_type.setter
    def response_process_type(self, response_process_type):
        """Sets the response_process_type of this WsdlPolicies1.


        :param response_process_type: The response_process_type of this WsdlPolicies1.  # noqa: E501
        :type: str
        """
        allowed_values = ["TASK_LIST", "TASK_LIST_GROUP"]  # noqa: E501
        if response_process_type not in allowed_values:
            raise ValueError(
                "Invalid value for `response_process_type` ({0}), must be one of {1}"  # noqa: E501
                .format(response_process_type, allowed_values)
            )

        self._response_process_type = response_process_type

    @property
    def idp_group(self):
        """Gets the idp_group of this WsdlPolicies1.  # noqa: E501


        :return: The idp_group of this WsdlPolicies1.  # noqa: E501
        :rtype: str
        """
        return self._idp_group

    @idp_group.setter
    def idp_group(self, idp_group):
        """Sets the idp_group of this WsdlPolicies1.


        :param idp_group: The idp_group of this WsdlPolicies1.  # noqa: E501
        :type: str
        """

        self._idp_group = idp_group

    @property
    def password(self):
        """Gets the password of this WsdlPolicies1.  # noqa: E501


        :return: The password of this WsdlPolicies1.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this WsdlPolicies1.


        :param password: The password of this WsdlPolicies1.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def process_response(self):
        """Gets the process_response of this WsdlPolicies1.  # noqa: E501


        :return: The process_response of this WsdlPolicies1.  # noqa: E501
        :rtype: bool
        """
        return self._process_response

    @process_response.setter
    def process_response(self, process_response):
        """Sets the process_response of this WsdlPolicies1.


        :param process_response: The process_response of this WsdlPolicies1.  # noqa: E501
        :type: bool
        """

        self._process_response = process_response

    @property
    def request_process(self):
        """Gets the request_process of this WsdlPolicies1.  # noqa: E501


        :return: The request_process of this WsdlPolicies1.  # noqa: E501
        :rtype: str
        """
        return self._request_process

    @request_process.setter
    def request_process(self, request_process):
        """Sets the request_process of this WsdlPolicies1.


        :param request_process: The request_process of this WsdlPolicies1.  # noqa: E501
        :type: str
        """

        self._request_process = request_process

    @property
    def allow_additional_headers(self):
        """Gets the allow_additional_headers of this WsdlPolicies1.  # noqa: E501


        :return: The allow_additional_headers of this WsdlPolicies1.  # noqa: E501
        :rtype: bool
        """
        return self._allow_additional_headers

    @allow_additional_headers.setter
    def allow_additional_headers(self, allow_additional_headers):
        """Sets the allow_additional_headers of this WsdlPolicies1.


        :param allow_additional_headers: The allow_additional_headers of this WsdlPolicies1.  # noqa: E501
        :type: bool
        """

        self._allow_additional_headers = allow_additional_headers

    @property
    def wsdl_namespace(self):
        """Gets the wsdl_namespace of this WsdlPolicies1.  # noqa: E501


        :return: The wsdl_namespace of this WsdlPolicies1.  # noqa: E501
        :rtype: str
        """
        return self._wsdl_namespace

    @wsdl_namespace.setter
    def wsdl_namespace(self, wsdl_namespace):
        """Sets the wsdl_namespace of this WsdlPolicies1.


        :param wsdl_namespace: The wsdl_namespace of this WsdlPolicies1.  # noqa: E501
        :type: str
        """

        self._wsdl_namespace = wsdl_namespace

    @property
    def response_process(self):
        """Gets the response_process of this WsdlPolicies1.  # noqa: E501


        :return: The response_process of this WsdlPolicies1.  # noqa: E501
        :rtype: str
        """
        return self._response_process

    @response_process.setter
    def response_process(self, response_process):
        """Sets the response_process of this WsdlPolicies1.


        :param response_process: The response_process of this WsdlPolicies1.  # noqa: E501
        :type: str
        """

        self._response_process = response_process

    @property
    def wsdl_service_name(self):
        """Gets the wsdl_service_name of this WsdlPolicies1.  # noqa: E501


        :return: The wsdl_service_name of this WsdlPolicies1.  # noqa: E501
        :rtype: str
        """
        return self._wsdl_service_name

    @wsdl_service_name.setter
    def wsdl_service_name(self, wsdl_service_name):
        """Sets the wsdl_service_name of this WsdlPolicies1.


        :param wsdl_service_name: The wsdl_service_name of this WsdlPolicies1.  # noqa: E501
        :type: str
        """

        self._wsdl_service_name = wsdl_service_name

    @property
    def envelope_validation(self):
        """Gets the envelope_validation of this WsdlPolicies1.  # noqa: E501


        :return: The envelope_validation of this WsdlPolicies1.  # noqa: E501
        :rtype: bool
        """
        return self._envelope_validation

    @envelope_validation.setter
    def envelope_validation(self, envelope_validation):
        """Sets the envelope_validation of this WsdlPolicies1.


        :param envelope_validation: The envelope_validation of this WsdlPolicies1.  # noqa: E501
        :type: bool
        """

        self._envelope_validation = envelope_validation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WsdlPolicies1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
