# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SyslogPolicy1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ssl_enabled': 'bool',
        'host_name': 'str',
        'audit_warning': 'bool',
        'audit_severe': 'bool',
        'access_debug': 'bool',
        'send_system': 'bool',
        'system_debug': 'bool',
        'protocol': 'str',
        'ssl_initiation_policy': 'str',
        'system_warning': 'bool',
        'facility': 'str',
        'access_severe': 'bool',
        'audit_debug': 'bool',
        'name': 'str',
        'description': 'str',
        'send_access': 'bool',
        'access_info': 'bool',
        'syslog_version': 'str',
        'enabled': 'bool',
        'system_severe': 'bool',
        'access_warning': 'bool',
        'send_audit': 'bool',
        'port': 'str',
        'audit_info': 'bool',
        'system_info': 'bool'
    }

    attribute_map = {
        'ssl_enabled': 'sslEnabled',
        'host_name': 'hostName',
        'audit_warning': 'auditWarning',
        'audit_severe': 'auditSevere',
        'access_debug': 'accessDebug',
        'send_system': 'sendSystem',
        'system_debug': 'systemDebug',
        'protocol': 'protocol',
        'ssl_initiation_policy': 'sslInitiationPolicy',
        'system_warning': 'systemWarning',
        'facility': 'facility',
        'access_severe': 'accessSevere',
        'audit_debug': 'auditDebug',
        'name': 'name',
        'description': 'description',
        'send_access': 'sendAccess',
        'access_info': 'accessInfo',
        'syslog_version': 'syslogVersion',
        'enabled': 'enabled',
        'system_severe': 'systemSevere',
        'access_warning': 'accessWarning',
        'send_audit': 'sendAudit',
        'port': 'port',
        'audit_info': 'auditInfo',
        'system_info': 'systemInfo'
    }

    def __init__(self, ssl_enabled=None, host_name=None, audit_warning=None, audit_severe=None, access_debug=None, send_system=None, system_debug=None, protocol=None, ssl_initiation_policy=None, system_warning=None, facility=None, access_severe=None, audit_debug=None, name=None, description=None, send_access=None, access_info=None, syslog_version=None, enabled=None, system_severe=None, access_warning=None, send_audit=None, port=None, audit_info=None, system_info=None):  # noqa: E501
        """SyslogPolicy1 - a model defined in Swagger"""  # noqa: E501

        self._ssl_enabled = None
        self._host_name = None
        self._audit_warning = None
        self._audit_severe = None
        self._access_debug = None
        self._send_system = None
        self._system_debug = None
        self._protocol = None
        self._ssl_initiation_policy = None
        self._system_warning = None
        self._facility = None
        self._access_severe = None
        self._audit_debug = None
        self._name = None
        self._description = None
        self._send_access = None
        self._access_info = None
        self._syslog_version = None
        self._enabled = None
        self._system_severe = None
        self._access_warning = None
        self._send_audit = None
        self._port = None
        self._audit_info = None
        self._system_info = None
        self.discriminator = None

        if ssl_enabled is not None:
            self.ssl_enabled = ssl_enabled
        if host_name is not None:
            self.host_name = host_name
        if audit_warning is not None:
            self.audit_warning = audit_warning
        if audit_severe is not None:
            self.audit_severe = audit_severe
        if access_debug is not None:
            self.access_debug = access_debug
        if send_system is not None:
            self.send_system = send_system
        if system_debug is not None:
            self.system_debug = system_debug
        if protocol is not None:
            self.protocol = protocol
        if ssl_initiation_policy is not None:
            self.ssl_initiation_policy = ssl_initiation_policy
        if system_warning is not None:
            self.system_warning = system_warning
        if facility is not None:
            self.facility = facility
        if access_severe is not None:
            self.access_severe = access_severe
        if audit_debug is not None:
            self.audit_debug = audit_debug
        self.name = name
        if description is not None:
            self.description = description
        if send_access is not None:
            self.send_access = send_access
        if access_info is not None:
            self.access_info = access_info
        if syslog_version is not None:
            self.syslog_version = syslog_version
        if enabled is not None:
            self.enabled = enabled
        if system_severe is not None:
            self.system_severe = system_severe
        if access_warning is not None:
            self.access_warning = access_warning
        if send_audit is not None:
            self.send_audit = send_audit
        if port is not None:
            self.port = port
        if audit_info is not None:
            self.audit_info = audit_info
        if system_info is not None:
            self.system_info = system_info

    @property
    def ssl_enabled(self):
        """Gets the ssl_enabled of this SyslogPolicy1.  # noqa: E501


        :return: The ssl_enabled of this SyslogPolicy1.  # noqa: E501
        :rtype: bool
        """
        return self._ssl_enabled

    @ssl_enabled.setter
    def ssl_enabled(self, ssl_enabled):
        """Sets the ssl_enabled of this SyslogPolicy1.


        :param ssl_enabled: The ssl_enabled of this SyslogPolicy1.  # noqa: E501
        :type: bool
        """

        self._ssl_enabled = ssl_enabled

    @property
    def host_name(self):
        """Gets the host_name of this SyslogPolicy1.  # noqa: E501


        :return: The host_name of this SyslogPolicy1.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this SyslogPolicy1.


        :param host_name: The host_name of this SyslogPolicy1.  # noqa: E501
        :type: str
        """

        self._host_name = host_name

    @property
    def audit_warning(self):
        """Gets the audit_warning of this SyslogPolicy1.  # noqa: E501


        :return: The audit_warning of this SyslogPolicy1.  # noqa: E501
        :rtype: bool
        """
        return self._audit_warning

    @audit_warning.setter
    def audit_warning(self, audit_warning):
        """Sets the audit_warning of this SyslogPolicy1.


        :param audit_warning: The audit_warning of this SyslogPolicy1.  # noqa: E501
        :type: bool
        """

        self._audit_warning = audit_warning

    @property
    def audit_severe(self):
        """Gets the audit_severe of this SyslogPolicy1.  # noqa: E501


        :return: The audit_severe of this SyslogPolicy1.  # noqa: E501
        :rtype: bool
        """
        return self._audit_severe

    @audit_severe.setter
    def audit_severe(self, audit_severe):
        """Sets the audit_severe of this SyslogPolicy1.


        :param audit_severe: The audit_severe of this SyslogPolicy1.  # noqa: E501
        :type: bool
        """

        self._audit_severe = audit_severe

    @property
    def access_debug(self):
        """Gets the access_debug of this SyslogPolicy1.  # noqa: E501


        :return: The access_debug of this SyslogPolicy1.  # noqa: E501
        :rtype: bool
        """
        return self._access_debug

    @access_debug.setter
    def access_debug(self, access_debug):
        """Sets the access_debug of this SyslogPolicy1.


        :param access_debug: The access_debug of this SyslogPolicy1.  # noqa: E501
        :type: bool
        """

        self._access_debug = access_debug

    @property
    def send_system(self):
        """Gets the send_system of this SyslogPolicy1.  # noqa: E501


        :return: The send_system of this SyslogPolicy1.  # noqa: E501
        :rtype: bool
        """
        return self._send_system

    @send_system.setter
    def send_system(self, send_system):
        """Sets the send_system of this SyslogPolicy1.


        :param send_system: The send_system of this SyslogPolicy1.  # noqa: E501
        :type: bool
        """

        self._send_system = send_system

    @property
    def system_debug(self):
        """Gets the system_debug of this SyslogPolicy1.  # noqa: E501


        :return: The system_debug of this SyslogPolicy1.  # noqa: E501
        :rtype: bool
        """
        return self._system_debug

    @system_debug.setter
    def system_debug(self, system_debug):
        """Sets the system_debug of this SyslogPolicy1.


        :param system_debug: The system_debug of this SyslogPolicy1.  # noqa: E501
        :type: bool
        """

        self._system_debug = system_debug

    @property
    def protocol(self):
        """Gets the protocol of this SyslogPolicy1.  # noqa: E501


        :return: The protocol of this SyslogPolicy1.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this SyslogPolicy1.


        :param protocol: The protocol of this SyslogPolicy1.  # noqa: E501
        :type: str
        """
        allowed_values = ["UDP", "TCP"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def ssl_initiation_policy(self):
        """Gets the ssl_initiation_policy of this SyslogPolicy1.  # noqa: E501


        :return: The ssl_initiation_policy of this SyslogPolicy1.  # noqa: E501
        :rtype: str
        """
        return self._ssl_initiation_policy

    @ssl_initiation_policy.setter
    def ssl_initiation_policy(self, ssl_initiation_policy):
        """Sets the ssl_initiation_policy of this SyslogPolicy1.


        :param ssl_initiation_policy: The ssl_initiation_policy of this SyslogPolicy1.  # noqa: E501
        :type: str
        """

        self._ssl_initiation_policy = ssl_initiation_policy

    @property
    def system_warning(self):
        """Gets the system_warning of this SyslogPolicy1.  # noqa: E501


        :return: The system_warning of this SyslogPolicy1.  # noqa: E501
        :rtype: bool
        """
        return self._system_warning

    @system_warning.setter
    def system_warning(self, system_warning):
        """Sets the system_warning of this SyslogPolicy1.


        :param system_warning: The system_warning of this SyslogPolicy1.  # noqa: E501
        :type: bool
        """

        self._system_warning = system_warning

    @property
    def facility(self):
        """Gets the facility of this SyslogPolicy1.  # noqa: E501


        :return: The facility of this SyslogPolicy1.  # noqa: E501
        :rtype: str
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this SyslogPolicy1.


        :param facility: The facility of this SyslogPolicy1.  # noqa: E501
        :type: str
        """
        allowed_values = ["KERNEL", "USER", "MAIL", "DAEMON", "AUTH", "SYSLOGD", "PRINT", "NEWS", "UUCP", "CLOCK", "SYS_SECURITY", "SYS_FTP", "SYS_NTP", "SYS_AUDIT", "SYS_ALERT", "SYS_CLOCK", "LOCAL_LEVEL0", "LOCAL_LEVEL1", "LOCAL_LEVEL2", "LOCAL_LEVEL3", "LOCAL_LEVEL4", "LOCAL_LEVEL5", "LOCAL_LEVEL6", "LOCAL_LEVEL7"]  # noqa: E501
        if facility not in allowed_values:
            raise ValueError(
                "Invalid value for `facility` ({0}), must be one of {1}"  # noqa: E501
                .format(facility, allowed_values)
            )

        self._facility = facility

    @property
    def access_severe(self):
        """Gets the access_severe of this SyslogPolicy1.  # noqa: E501


        :return: The access_severe of this SyslogPolicy1.  # noqa: E501
        :rtype: bool
        """
        return self._access_severe

    @access_severe.setter
    def access_severe(self, access_severe):
        """Sets the access_severe of this SyslogPolicy1.


        :param access_severe: The access_severe of this SyslogPolicy1.  # noqa: E501
        :type: bool
        """

        self._access_severe = access_severe

    @property
    def audit_debug(self):
        """Gets the audit_debug of this SyslogPolicy1.  # noqa: E501


        :return: The audit_debug of this SyslogPolicy1.  # noqa: E501
        :rtype: bool
        """
        return self._audit_debug

    @audit_debug.setter
    def audit_debug(self, audit_debug):
        """Sets the audit_debug of this SyslogPolicy1.


        :param audit_debug: The audit_debug of this SyslogPolicy1.  # noqa: E501
        :type: bool
        """

        self._audit_debug = audit_debug

    @property
    def name(self):
        """Gets the name of this SyslogPolicy1.  # noqa: E501


        :return: The name of this SyslogPolicy1.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SyslogPolicy1.


        :param name: The name of this SyslogPolicy1.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this SyslogPolicy1.  # noqa: E501


        :return: The description of this SyslogPolicy1.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SyslogPolicy1.


        :param description: The description of this SyslogPolicy1.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def send_access(self):
        """Gets the send_access of this SyslogPolicy1.  # noqa: E501


        :return: The send_access of this SyslogPolicy1.  # noqa: E501
        :rtype: bool
        """
        return self._send_access

    @send_access.setter
    def send_access(self, send_access):
        """Sets the send_access of this SyslogPolicy1.


        :param send_access: The send_access of this SyslogPolicy1.  # noqa: E501
        :type: bool
        """

        self._send_access = send_access

    @property
    def access_info(self):
        """Gets the access_info of this SyslogPolicy1.  # noqa: E501


        :return: The access_info of this SyslogPolicy1.  # noqa: E501
        :rtype: bool
        """
        return self._access_info

    @access_info.setter
    def access_info(self, access_info):
        """Sets the access_info of this SyslogPolicy1.


        :param access_info: The access_info of this SyslogPolicy1.  # noqa: E501
        :type: bool
        """

        self._access_info = access_info

    @property
    def syslog_version(self):
        """Gets the syslog_version of this SyslogPolicy1.  # noqa: E501


        :return: The syslog_version of this SyslogPolicy1.  # noqa: E501
        :rtype: str
        """
        return self._syslog_version

    @syslog_version.setter
    def syslog_version(self, syslog_version):
        """Sets the syslog_version of this SyslogPolicy1.


        :param syslog_version: The syslog_version of this SyslogPolicy1.  # noqa: E501
        :type: str
        """
        allowed_values = ["RFC3164", "RFC5424", "ARCSIGHTCEF"]  # noqa: E501
        if syslog_version not in allowed_values:
            raise ValueError(
                "Invalid value for `syslog_version` ({0}), must be one of {1}"  # noqa: E501
                .format(syslog_version, allowed_values)
            )

        self._syslog_version = syslog_version

    @property
    def enabled(self):
        """Gets the enabled of this SyslogPolicy1.  # noqa: E501


        :return: The enabled of this SyslogPolicy1.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this SyslogPolicy1.


        :param enabled: The enabled of this SyslogPolicy1.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def system_severe(self):
        """Gets the system_severe of this SyslogPolicy1.  # noqa: E501


        :return: The system_severe of this SyslogPolicy1.  # noqa: E501
        :rtype: bool
        """
        return self._system_severe

    @system_severe.setter
    def system_severe(self, system_severe):
        """Sets the system_severe of this SyslogPolicy1.


        :param system_severe: The system_severe of this SyslogPolicy1.  # noqa: E501
        :type: bool
        """

        self._system_severe = system_severe

    @property
    def access_warning(self):
        """Gets the access_warning of this SyslogPolicy1.  # noqa: E501


        :return: The access_warning of this SyslogPolicy1.  # noqa: E501
        :rtype: bool
        """
        return self._access_warning

    @access_warning.setter
    def access_warning(self, access_warning):
        """Sets the access_warning of this SyslogPolicy1.


        :param access_warning: The access_warning of this SyslogPolicy1.  # noqa: E501
        :type: bool
        """

        self._access_warning = access_warning

    @property
    def send_audit(self):
        """Gets the send_audit of this SyslogPolicy1.  # noqa: E501


        :return: The send_audit of this SyslogPolicy1.  # noqa: E501
        :rtype: bool
        """
        return self._send_audit

    @send_audit.setter
    def send_audit(self, send_audit):
        """Sets the send_audit of this SyslogPolicy1.


        :param send_audit: The send_audit of this SyslogPolicy1.  # noqa: E501
        :type: bool
        """

        self._send_audit = send_audit

    @property
    def port(self):
        """Gets the port of this SyslogPolicy1.  # noqa: E501


        :return: The port of this SyslogPolicy1.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this SyslogPolicy1.


        :param port: The port of this SyslogPolicy1.  # noqa: E501
        :type: str
        """

        self._port = port

    @property
    def audit_info(self):
        """Gets the audit_info of this SyslogPolicy1.  # noqa: E501


        :return: The audit_info of this SyslogPolicy1.  # noqa: E501
        :rtype: bool
        """
        return self._audit_info

    @audit_info.setter
    def audit_info(self, audit_info):
        """Sets the audit_info of this SyslogPolicy1.


        :param audit_info: The audit_info of this SyslogPolicy1.  # noqa: E501
        :type: bool
        """

        self._audit_info = audit_info

    @property
    def system_info(self):
        """Gets the system_info of this SyslogPolicy1.  # noqa: E501


        :return: The system_info of this SyslogPolicy1.  # noqa: E501
        :rtype: bool
        """
        return self._system_info

    @system_info.setter
    def system_info(self, system_info):
        """Sets the system_info of this SyslogPolicy1.


        :param system_info: The system_info of this SyslogPolicy1.  # noqa: E501
        :type: bool
        """

        self._system_info = system_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SyslogPolicy1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
