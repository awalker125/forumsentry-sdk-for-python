# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SslTerminationPolicy1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, associate_dn_to_user=None, description=None, signer_group=None, key_pair=None, acl_policy=None, use_user_attr_only=None, enabled_protocols=None, authenticate_client=None, name=None):
        """
        SslTerminationPolicy1 - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'associate_dn_to_user': 'bool',
            'description': 'str',
            'signer_group': 'str',
            'key_pair': 'str',
            'acl_policy': 'str',
            'use_user_attr_only': 'bool',
            'enabled_protocols': 'list[str]',
            'authenticate_client': 'bool',
            'name': 'str'
        }

        self.attribute_map = {
            'associate_dn_to_user': 'associateDnToUser',
            'description': 'description',
            'signer_group': 'signerGroup',
            'key_pair': 'keyPair',
            'acl_policy': 'aclPolicy',
            'use_user_attr_only': 'useUserAttrOnly',
            'enabled_protocols': 'enabledProtocols',
            'authenticate_client': 'authenticateClient',
            'name': 'name'
        }

        self._associate_dn_to_user = associate_dn_to_user
        self._description = description
        self._signer_group = signer_group
        self._key_pair = key_pair
        self._acl_policy = acl_policy
        self._use_user_attr_only = use_user_attr_only
        self._enabled_protocols = enabled_protocols
        self._authenticate_client = authenticate_client
        self._name = name

    @property
    def associate_dn_to_user(self):
        """
        Gets the associate_dn_to_user of this SslTerminationPolicy1.


        :return: The associate_dn_to_user of this SslTerminationPolicy1.
        :rtype: bool
        """
        return self._associate_dn_to_user

    @associate_dn_to_user.setter
    def associate_dn_to_user(self, associate_dn_to_user):
        """
        Sets the associate_dn_to_user of this SslTerminationPolicy1.


        :param associate_dn_to_user: The associate_dn_to_user of this SslTerminationPolicy1.
        :type: bool
        """

        self._associate_dn_to_user = associate_dn_to_user

    @property
    def description(self):
        """
        Gets the description of this SslTerminationPolicy1.


        :return: The description of this SslTerminationPolicy1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this SslTerminationPolicy1.


        :param description: The description of this SslTerminationPolicy1.
        :type: str
        """

        self._description = description

    @property
    def signer_group(self):
        """
        Gets the signer_group of this SslTerminationPolicy1.


        :return: The signer_group of this SslTerminationPolicy1.
        :rtype: str
        """
        return self._signer_group

    @signer_group.setter
    def signer_group(self, signer_group):
        """
        Sets the signer_group of this SslTerminationPolicy1.


        :param signer_group: The signer_group of this SslTerminationPolicy1.
        :type: str
        """

        self._signer_group = signer_group

    @property
    def key_pair(self):
        """
        Gets the key_pair of this SslTerminationPolicy1.


        :return: The key_pair of this SslTerminationPolicy1.
        :rtype: str
        """
        return self._key_pair

    @key_pair.setter
    def key_pair(self, key_pair):
        """
        Sets the key_pair of this SslTerminationPolicy1.


        :param key_pair: The key_pair of this SslTerminationPolicy1.
        :type: str
        """

        self._key_pair = key_pair

    @property
    def acl_policy(self):
        """
        Gets the acl_policy of this SslTerminationPolicy1.


        :return: The acl_policy of this SslTerminationPolicy1.
        :rtype: str
        """
        return self._acl_policy

    @acl_policy.setter
    def acl_policy(self, acl_policy):
        """
        Sets the acl_policy of this SslTerminationPolicy1.


        :param acl_policy: The acl_policy of this SslTerminationPolicy1.
        :type: str
        """

        self._acl_policy = acl_policy

    @property
    def use_user_attr_only(self):
        """
        Gets the use_user_attr_only of this SslTerminationPolicy1.


        :return: The use_user_attr_only of this SslTerminationPolicy1.
        :rtype: bool
        """
        return self._use_user_attr_only

    @use_user_attr_only.setter
    def use_user_attr_only(self, use_user_attr_only):
        """
        Sets the use_user_attr_only of this SslTerminationPolicy1.


        :param use_user_attr_only: The use_user_attr_only of this SslTerminationPolicy1.
        :type: bool
        """

        self._use_user_attr_only = use_user_attr_only

    @property
    def enabled_protocols(self):
        """
        Gets the enabled_protocols of this SslTerminationPolicy1.


        :return: The enabled_protocols of this SslTerminationPolicy1.
        :rtype: list[str]
        """
        return self._enabled_protocols

    @enabled_protocols.setter
    def enabled_protocols(self, enabled_protocols):
        """
        Sets the enabled_protocols of this SslTerminationPolicy1.


        :param enabled_protocols: The enabled_protocols of this SslTerminationPolicy1.
        :type: list[str]
        """

        self._enabled_protocols = enabled_protocols

    @property
    def authenticate_client(self):
        """
        Gets the authenticate_client of this SslTerminationPolicy1.


        :return: The authenticate_client of this SslTerminationPolicy1.
        :rtype: bool
        """
        return self._authenticate_client

    @authenticate_client.setter
    def authenticate_client(self, authenticate_client):
        """
        Sets the authenticate_client of this SslTerminationPolicy1.


        :param authenticate_client: The authenticate_client of this SslTerminationPolicy1.
        :type: bool
        """

        self._authenticate_client = authenticate_client

    @property
    def name(self):
        """
        Gets the name of this SslTerminationPolicy1.


        :return: The name of this SslTerminationPolicy1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SslTerminationPolicy1.


        :param name: The name of this SslTerminationPolicy1.
        :type: str
        """

        self._name = name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
