# coding: utf-8

"""
    forumsentry_api
    
"""


import pprint
import re  # noqa: F401

import six


class SslInitiationPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ignore_hostname_verification': 'bool',
        'description': 'str',
        'signer_group': 'str',
        'key_pair': 'str',
        'enabled_protocols': 'list[str]',
        'name': 'str'
    }

    attribute_map = {
        'ignore_hostname_verification': 'ignoreHostnameVerification',
        'description': 'description',
        'signer_group': 'signerGroup',
        'key_pair': 'keyPair',
        'enabled_protocols': 'enabledProtocols',
        'name': 'name'
    }

    def __init__(self, ignore_hostname_verification=None, description=None, signer_group=None, key_pair=None, enabled_protocols=None, name=None):  # noqa: E501
        """SslInitiationPolicy - a model defined in Swagger"""  # noqa: E501

        self._ignore_hostname_verification = None
        self._description = None
        self._signer_group = None
        self._key_pair = None
        self._enabled_protocols = None
        self._name = None
        self.discriminator = None

        if ignore_hostname_verification is not None:
            self._ignore_hostname_verification = ignore_hostname_verification
        if description is not None:
            self._description = description
        if signer_group is not None:
            self._signer_group = signer_group
        if key_pair is not None:
            self._key_pair = key_pair
        if enabled_protocols is not None:
            self._enabled_protocols = enabled_protocols
        if name is not None:
            self._name = name

    @property
    def ignore_hostname_verification(self):
        """Gets the ignore_hostname_verification of this SslInitiationPolicy.  # noqa: E501


        :return: The ignore_hostname_verification of this SslInitiationPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_hostname_verification

    @ignore_hostname_verification.setter
    def ignore_hostname_verification(self, ignore_hostname_verification):
        """Sets the ignore_hostname_verification of this SslInitiationPolicy.


        :param ignore_hostname_verification: The ignore_hostname_verification of this SslInitiationPolicy.  # noqa: E501
        :type: bool
        """

        self._ignore_hostname_verification = ignore_hostname_verification

    @property
    def description(self):
        """Gets the description of this SslInitiationPolicy.  # noqa: E501


        :return: The description of this SslInitiationPolicy.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SslInitiationPolicy.


        :param description: The description of this SslInitiationPolicy.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def signer_group(self):
        """Gets the signer_group of this SslInitiationPolicy.  # noqa: E501


        :return: The signer_group of this SslInitiationPolicy.  # noqa: E501
        :rtype: str
        """
        return self._signer_group

    @signer_group.setter
    def signer_group(self, signer_group):
        """Sets the signer_group of this SslInitiationPolicy.


        :param signer_group: The signer_group of this SslInitiationPolicy.  # noqa: E501
        :type: str
        """

        self._signer_group = signer_group

    @property
    def key_pair(self):
        """Gets the key_pair of this SslInitiationPolicy.  # noqa: E501


        :return: The key_pair of this SslInitiationPolicy.  # noqa: E501
        :rtype: str
        """
        return self._key_pair

    @key_pair.setter
    def key_pair(self, key_pair):
        """Sets the key_pair of this SslInitiationPolicy.


        :param key_pair: The key_pair of this SslInitiationPolicy.  # noqa: E501
        :type: str
        """

        self._key_pair = key_pair

    @property
    def enabled_protocols(self):
        """Gets the enabled_protocols of this SslInitiationPolicy.  # noqa: E501


        :return: The enabled_protocols of this SslInitiationPolicy.  # noqa: E501
        :rtype: list[str]
        """
        return self._enabled_protocols

    @enabled_protocols.setter
    def enabled_protocols(self, enabled_protocols):
        """Sets the enabled_protocols of this SslInitiationPolicy.


        :param enabled_protocols: The enabled_protocols of this SslInitiationPolicy.  # noqa: E501
        :type: list[str]
        """

        self._enabled_protocols = enabled_protocols

    @property
    def name(self):
        """Gets the name of this SslInitiationPolicy.  # noqa: E501


        :return: The name of this SslInitiationPolicy.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SslInitiationPolicy.


        :param name: The name of this SslInitiationPolicy.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SslInitiationPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
