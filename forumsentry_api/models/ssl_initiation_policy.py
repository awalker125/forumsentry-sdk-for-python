# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SslInitiationPolicy(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, ignore_hostname_verification=None, description=None, signer_group=None, key_pair=None, enabled_protocols=None, name=None):
        """
        SslInitiationPolicy - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'ignore_hostname_verification': 'bool',
            'description': 'str',
            'signer_group': 'str',
            'key_pair': 'str',
            'enabled_protocols': 'list[str]',
            'name': 'str'
        }

        self.attribute_map = {
            'ignore_hostname_verification': 'ignoreHostnameVerification',
            'description': 'description',
            'signer_group': 'signerGroup',
            'key_pair': 'keyPair',
            'enabled_protocols': 'enabledProtocols',
            'name': 'name'
        }

        self._ignore_hostname_verification = ignore_hostname_verification
        self._description = description
        self._signer_group = signer_group
        self._key_pair = key_pair
        self._enabled_protocols = enabled_protocols
        self._name = name

    @property
    def ignore_hostname_verification(self):
        """
        Gets the ignore_hostname_verification of this SslInitiationPolicy.


        :return: The ignore_hostname_verification of this SslInitiationPolicy.
        :rtype: bool
        """
        return self._ignore_hostname_verification

    @ignore_hostname_verification.setter
    def ignore_hostname_verification(self, ignore_hostname_verification):
        """
        Sets the ignore_hostname_verification of this SslInitiationPolicy.


        :param ignore_hostname_verification: The ignore_hostname_verification of this SslInitiationPolicy.
        :type: bool
        """

        self._ignore_hostname_verification = ignore_hostname_verification

    @property
    def description(self):
        """
        Gets the description of this SslInitiationPolicy.


        :return: The description of this SslInitiationPolicy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this SslInitiationPolicy.


        :param description: The description of this SslInitiationPolicy.
        :type: str
        """

        self._description = description

    @property
    def signer_group(self):
        """
        Gets the signer_group of this SslInitiationPolicy.


        :return: The signer_group of this SslInitiationPolicy.
        :rtype: str
        """
        return self._signer_group

    @signer_group.setter
    def signer_group(self, signer_group):
        """
        Sets the signer_group of this SslInitiationPolicy.


        :param signer_group: The signer_group of this SslInitiationPolicy.
        :type: str
        """

        self._signer_group = signer_group

    @property
    def key_pair(self):
        """
        Gets the key_pair of this SslInitiationPolicy.


        :return: The key_pair of this SslInitiationPolicy.
        :rtype: str
        """
        return self._key_pair

    @key_pair.setter
    def key_pair(self, key_pair):
        """
        Sets the key_pair of this SslInitiationPolicy.


        :param key_pair: The key_pair of this SslInitiationPolicy.
        :type: str
        """

        self._key_pair = key_pair

    @property
    def enabled_protocols(self):
        """
        Gets the enabled_protocols of this SslInitiationPolicy.


        :return: The enabled_protocols of this SslInitiationPolicy.
        :rtype: list[str]
        """
        return self._enabled_protocols

    @enabled_protocols.setter
    def enabled_protocols(self, enabled_protocols):
        """
        Sets the enabled_protocols of this SslInitiationPolicy.


        :param enabled_protocols: The enabled_protocols of this SslInitiationPolicy.
        :type: list[str]
        """

        self._enabled_protocols = enabled_protocols

    @property
    def name(self):
        """
        Gets the name of this SslInitiationPolicy.


        :return: The name of this SslInitiationPolicy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SslInitiationPolicy.


        :param name: The name of this SslInitiationPolicy.
        :type: str
        """

        self._name = name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
