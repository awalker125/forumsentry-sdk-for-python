# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LoggingConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'signing_key_pair': 'str',
        'log_level_override_enabled': 'bool',
        'global_log_level': 'str',
        'archive_system': 'bool',
        'filter_error_codes': 'bool',
        'error_codes': 'list[str]',
        'pattern_match': 'str',
        'system_log_retention_days': 'int',
        'display_message_length': 'int',
        'log_file_size_mb': 'int',
        'description': 'str',
        'database_logging_enabled': 'bool',
        'ssl_debug_enabled': 'bool',
        'audit_log_retention_days': 'int',
        'audit_log_level': 'str',
        'compression_type': 'str',
        'archive_access': 'bool',
        'download_format': 'str',
        'access_log_level': 'str',
        'archive_audit': 'bool',
        'access_log_retention_days': 'int',
        'system_log_level': 'str'
    }

    attribute_map = {
        'signing_key_pair': 'signingKeyPair',
        'log_level_override_enabled': 'logLevelOverrideEnabled',
        'global_log_level': 'globalLogLevel',
        'archive_system': 'archiveSystem',
        'filter_error_codes': 'filterErrorCodes',
        'error_codes': 'errorCodes',
        'pattern_match': 'patternMatch',
        'system_log_retention_days': 'systemLogRetentionDays',
        'display_message_length': 'displayMessageLength',
        'log_file_size_mb': 'logFileSizeMB',
        'description': 'description',
        'database_logging_enabled': 'databaseLoggingEnabled',
        'ssl_debug_enabled': 'sslDebugEnabled',
        'audit_log_retention_days': 'auditLogRetentionDays',
        'audit_log_level': 'auditLogLevel',
        'compression_type': 'compressionType',
        'archive_access': 'archiveAccess',
        'download_format': 'downloadFormat',
        'access_log_level': 'accessLogLevel',
        'archive_audit': 'archiveAudit',
        'access_log_retention_days': 'accessLogRetentionDays',
        'system_log_level': 'systemLogLevel'
    }

    def __init__(self, signing_key_pair=None, log_level_override_enabled=None, global_log_level=None, archive_system=None, filter_error_codes=None, error_codes=None, pattern_match=None, system_log_retention_days=None, display_message_length=None, log_file_size_mb=None, description=None, database_logging_enabled=None, ssl_debug_enabled=None, audit_log_retention_days=None, audit_log_level=None, compression_type=None, archive_access=None, download_format=None, access_log_level=None, archive_audit=None, access_log_retention_days=None, system_log_level=None):  # noqa: E501
        """LoggingConfiguration - a model defined in Swagger"""  # noqa: E501

        self._signing_key_pair = None
        self._log_level_override_enabled = None
        self._global_log_level = None
        self._archive_system = None
        self._filter_error_codes = None
        self._error_codes = None
        self._pattern_match = None
        self._system_log_retention_days = None
        self._display_message_length = None
        self._log_file_size_mb = None
        self._description = None
        self._database_logging_enabled = None
        self._ssl_debug_enabled = None
        self._audit_log_retention_days = None
        self._audit_log_level = None
        self._compression_type = None
        self._archive_access = None
        self._download_format = None
        self._access_log_level = None
        self._archive_audit = None
        self._access_log_retention_days = None
        self._system_log_level = None
        self.discriminator = None

        if signing_key_pair is not None:
            self.signing_key_pair = signing_key_pair
        if log_level_override_enabled is not None:
            self.log_level_override_enabled = log_level_override_enabled
        if global_log_level is not None:
            self.global_log_level = global_log_level
        if archive_system is not None:
            self.archive_system = archive_system
        if filter_error_codes is not None:
            self.filter_error_codes = filter_error_codes
        if error_codes is not None:
            self.error_codes = error_codes
        if pattern_match is not None:
            self.pattern_match = pattern_match
        if system_log_retention_days is not None:
            self.system_log_retention_days = system_log_retention_days
        if display_message_length is not None:
            self.display_message_length = display_message_length
        if log_file_size_mb is not None:
            self.log_file_size_mb = log_file_size_mb
        if description is not None:
            self.description = description
        if database_logging_enabled is not None:
            self.database_logging_enabled = database_logging_enabled
        if ssl_debug_enabled is not None:
            self.ssl_debug_enabled = ssl_debug_enabled
        if audit_log_retention_days is not None:
            self.audit_log_retention_days = audit_log_retention_days
        if audit_log_level is not None:
            self.audit_log_level = audit_log_level
        if compression_type is not None:
            self.compression_type = compression_type
        if archive_access is not None:
            self.archive_access = archive_access
        if download_format is not None:
            self.download_format = download_format
        if access_log_level is not None:
            self.access_log_level = access_log_level
        if archive_audit is not None:
            self.archive_audit = archive_audit
        if access_log_retention_days is not None:
            self.access_log_retention_days = access_log_retention_days
        if system_log_level is not None:
            self.system_log_level = system_log_level

    @property
    def signing_key_pair(self):
        """Gets the signing_key_pair of this LoggingConfiguration.  # noqa: E501


        :return: The signing_key_pair of this LoggingConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._signing_key_pair

    @signing_key_pair.setter
    def signing_key_pair(self, signing_key_pair):
        """Sets the signing_key_pair of this LoggingConfiguration.


        :param signing_key_pair: The signing_key_pair of this LoggingConfiguration.  # noqa: E501
        :type: str
        """

        self._signing_key_pair = signing_key_pair

    @property
    def log_level_override_enabled(self):
        """Gets the log_level_override_enabled of this LoggingConfiguration.  # noqa: E501


        :return: The log_level_override_enabled of this LoggingConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._log_level_override_enabled

    @log_level_override_enabled.setter
    def log_level_override_enabled(self, log_level_override_enabled):
        """Sets the log_level_override_enabled of this LoggingConfiguration.


        :param log_level_override_enabled: The log_level_override_enabled of this LoggingConfiguration.  # noqa: E501
        :type: bool
        """

        self._log_level_override_enabled = log_level_override_enabled

    @property
    def global_log_level(self):
        """Gets the global_log_level of this LoggingConfiguration.  # noqa: E501


        :return: The global_log_level of this LoggingConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._global_log_level

    @global_log_level.setter
    def global_log_level(self, global_log_level):
        """Sets the global_log_level of this LoggingConfiguration.


        :param global_log_level: The global_log_level of this LoggingConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["ERROR", "WARNING", "INFO", "DEBUG"]  # noqa: E501
        if global_log_level not in allowed_values:
            raise ValueError(
                "Invalid value for `global_log_level` ({0}), must be one of {1}"  # noqa: E501
                .format(global_log_level, allowed_values)
            )

        self._global_log_level = global_log_level

    @property
    def archive_system(self):
        """Gets the archive_system of this LoggingConfiguration.  # noqa: E501


        :return: The archive_system of this LoggingConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._archive_system

    @archive_system.setter
    def archive_system(self, archive_system):
        """Sets the archive_system of this LoggingConfiguration.


        :param archive_system: The archive_system of this LoggingConfiguration.  # noqa: E501
        :type: bool
        """

        self._archive_system = archive_system

    @property
    def filter_error_codes(self):
        """Gets the filter_error_codes of this LoggingConfiguration.  # noqa: E501


        :return: The filter_error_codes of this LoggingConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._filter_error_codes

    @filter_error_codes.setter
    def filter_error_codes(self, filter_error_codes):
        """Sets the filter_error_codes of this LoggingConfiguration.


        :param filter_error_codes: The filter_error_codes of this LoggingConfiguration.  # noqa: E501
        :type: bool
        """

        self._filter_error_codes = filter_error_codes

    @property
    def error_codes(self):
        """Gets the error_codes of this LoggingConfiguration.  # noqa: E501


        :return: The error_codes of this LoggingConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._error_codes

    @error_codes.setter
    def error_codes(self, error_codes):
        """Sets the error_codes of this LoggingConfiguration.


        :param error_codes: The error_codes of this LoggingConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._error_codes = error_codes

    @property
    def pattern_match(self):
        """Gets the pattern_match of this LoggingConfiguration.  # noqa: E501


        :return: The pattern_match of this LoggingConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._pattern_match

    @pattern_match.setter
    def pattern_match(self, pattern_match):
        """Sets the pattern_match of this LoggingConfiguration.


        :param pattern_match: The pattern_match of this LoggingConfiguration.  # noqa: E501
        :type: str
        """

        self._pattern_match = pattern_match

    @property
    def system_log_retention_days(self):
        """Gets the system_log_retention_days of this LoggingConfiguration.  # noqa: E501


        :return: The system_log_retention_days of this LoggingConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._system_log_retention_days

    @system_log_retention_days.setter
    def system_log_retention_days(self, system_log_retention_days):
        """Sets the system_log_retention_days of this LoggingConfiguration.


        :param system_log_retention_days: The system_log_retention_days of this LoggingConfiguration.  # noqa: E501
        :type: int
        """

        self._system_log_retention_days = system_log_retention_days

    @property
    def display_message_length(self):
        """Gets the display_message_length of this LoggingConfiguration.  # noqa: E501


        :return: The display_message_length of this LoggingConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._display_message_length

    @display_message_length.setter
    def display_message_length(self, display_message_length):
        """Sets the display_message_length of this LoggingConfiguration.


        :param display_message_length: The display_message_length of this LoggingConfiguration.  # noqa: E501
        :type: int
        """

        self._display_message_length = display_message_length

    @property
    def log_file_size_mb(self):
        """Gets the log_file_size_mb of this LoggingConfiguration.  # noqa: E501


        :return: The log_file_size_mb of this LoggingConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._log_file_size_mb

    @log_file_size_mb.setter
    def log_file_size_mb(self, log_file_size_mb):
        """Sets the log_file_size_mb of this LoggingConfiguration.


        :param log_file_size_mb: The log_file_size_mb of this LoggingConfiguration.  # noqa: E501
        :type: int
        """

        self._log_file_size_mb = log_file_size_mb

    @property
    def description(self):
        """Gets the description of this LoggingConfiguration.  # noqa: E501


        :return: The description of this LoggingConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LoggingConfiguration.


        :param description: The description of this LoggingConfiguration.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def database_logging_enabled(self):
        """Gets the database_logging_enabled of this LoggingConfiguration.  # noqa: E501


        :return: The database_logging_enabled of this LoggingConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._database_logging_enabled

    @database_logging_enabled.setter
    def database_logging_enabled(self, database_logging_enabled):
        """Sets the database_logging_enabled of this LoggingConfiguration.


        :param database_logging_enabled: The database_logging_enabled of this LoggingConfiguration.  # noqa: E501
        :type: bool
        """

        self._database_logging_enabled = database_logging_enabled

    @property
    def ssl_debug_enabled(self):
        """Gets the ssl_debug_enabled of this LoggingConfiguration.  # noqa: E501


        :return: The ssl_debug_enabled of this LoggingConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._ssl_debug_enabled

    @ssl_debug_enabled.setter
    def ssl_debug_enabled(self, ssl_debug_enabled):
        """Sets the ssl_debug_enabled of this LoggingConfiguration.


        :param ssl_debug_enabled: The ssl_debug_enabled of this LoggingConfiguration.  # noqa: E501
        :type: bool
        """

        self._ssl_debug_enabled = ssl_debug_enabled

    @property
    def audit_log_retention_days(self):
        """Gets the audit_log_retention_days of this LoggingConfiguration.  # noqa: E501


        :return: The audit_log_retention_days of this LoggingConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._audit_log_retention_days

    @audit_log_retention_days.setter
    def audit_log_retention_days(self, audit_log_retention_days):
        """Sets the audit_log_retention_days of this LoggingConfiguration.


        :param audit_log_retention_days: The audit_log_retention_days of this LoggingConfiguration.  # noqa: E501
        :type: int
        """

        self._audit_log_retention_days = audit_log_retention_days

    @property
    def audit_log_level(self):
        """Gets the audit_log_level of this LoggingConfiguration.  # noqa: E501


        :return: The audit_log_level of this LoggingConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._audit_log_level

    @audit_log_level.setter
    def audit_log_level(self, audit_log_level):
        """Sets the audit_log_level of this LoggingConfiguration.


        :param audit_log_level: The audit_log_level of this LoggingConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["ERROR", "WARNING", "INFO", "DEBUG"]  # noqa: E501
        if audit_log_level not in allowed_values:
            raise ValueError(
                "Invalid value for `audit_log_level` ({0}), must be one of {1}"  # noqa: E501
                .format(audit_log_level, allowed_values)
            )

        self._audit_log_level = audit_log_level

    @property
    def compression_type(self):
        """Gets the compression_type of this LoggingConfiguration.  # noqa: E501


        :return: The compression_type of this LoggingConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._compression_type

    @compression_type.setter
    def compression_type(self, compression_type):
        """Sets the compression_type of this LoggingConfiguration.


        :param compression_type: The compression_type of this LoggingConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["GZIP", "ZIP"]  # noqa: E501
        if compression_type not in allowed_values:
            raise ValueError(
                "Invalid value for `compression_type` ({0}), must be one of {1}"  # noqa: E501
                .format(compression_type, allowed_values)
            )

        self._compression_type = compression_type

    @property
    def archive_access(self):
        """Gets the archive_access of this LoggingConfiguration.  # noqa: E501


        :return: The archive_access of this LoggingConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._archive_access

    @archive_access.setter
    def archive_access(self, archive_access):
        """Sets the archive_access of this LoggingConfiguration.


        :param archive_access: The archive_access of this LoggingConfiguration.  # noqa: E501
        :type: bool
        """

        self._archive_access = archive_access

    @property
    def download_format(self):
        """Gets the download_format of this LoggingConfiguration.  # noqa: E501


        :return: The download_format of this LoggingConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._download_format

    @download_format.setter
    def download_format(self, download_format):
        """Sets the download_format of this LoggingConfiguration.


        :param download_format: The download_format of this LoggingConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["XML", "TEXT", "HTML"]  # noqa: E501
        if download_format not in allowed_values:
            raise ValueError(
                "Invalid value for `download_format` ({0}), must be one of {1}"  # noqa: E501
                .format(download_format, allowed_values)
            )

        self._download_format = download_format

    @property
    def access_log_level(self):
        """Gets the access_log_level of this LoggingConfiguration.  # noqa: E501


        :return: The access_log_level of this LoggingConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._access_log_level

    @access_log_level.setter
    def access_log_level(self, access_log_level):
        """Sets the access_log_level of this LoggingConfiguration.


        :param access_log_level: The access_log_level of this LoggingConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["ERROR", "WARNING", "INFO", "DEBUG"]  # noqa: E501
        if access_log_level not in allowed_values:
            raise ValueError(
                "Invalid value for `access_log_level` ({0}), must be one of {1}"  # noqa: E501
                .format(access_log_level, allowed_values)
            )

        self._access_log_level = access_log_level

    @property
    def archive_audit(self):
        """Gets the archive_audit of this LoggingConfiguration.  # noqa: E501


        :return: The archive_audit of this LoggingConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._archive_audit

    @archive_audit.setter
    def archive_audit(self, archive_audit):
        """Sets the archive_audit of this LoggingConfiguration.


        :param archive_audit: The archive_audit of this LoggingConfiguration.  # noqa: E501
        :type: bool
        """

        self._archive_audit = archive_audit

    @property
    def access_log_retention_days(self):
        """Gets the access_log_retention_days of this LoggingConfiguration.  # noqa: E501


        :return: The access_log_retention_days of this LoggingConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._access_log_retention_days

    @access_log_retention_days.setter
    def access_log_retention_days(self, access_log_retention_days):
        """Sets the access_log_retention_days of this LoggingConfiguration.


        :param access_log_retention_days: The access_log_retention_days of this LoggingConfiguration.  # noqa: E501
        :type: int
        """

        self._access_log_retention_days = access_log_retention_days

    @property
    def system_log_level(self):
        """Gets the system_log_level of this LoggingConfiguration.  # noqa: E501


        :return: The system_log_level of this LoggingConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._system_log_level

    @system_log_level.setter
    def system_log_level(self, system_log_level):
        """Sets the system_log_level of this LoggingConfiguration.


        :param system_log_level: The system_log_level of this LoggingConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["ERROR", "WARNING", "INFO", "DEBUG"]  # noqa: E501
        if system_log_level not in allowed_values:
            raise ValueError(
                "Invalid value for `system_log_level` ({0}), must be one of {1}"  # noqa: E501
                .format(system_log_level, allowed_values)
            )

        self._system_log_level = system_log_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoggingConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
