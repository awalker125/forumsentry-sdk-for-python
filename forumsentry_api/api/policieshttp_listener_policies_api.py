# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class PolicieshttpListenerPoliciesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_or_update_policy(self, id, **kwargs):
        """
        creates or updates the HTTP Listener Policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_or_update_policy(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str acl_policy: 
        :param str description: 
        :param bool enabled: 
        :param str error_template: 
        :param str interface: 
        :param str ip_acl_policy: 
        :param str listener_host: 
        :param bool listener_ssl_enabled: 
        :param str listener_ssl_policy: 
        :param str name: 
        :param str password_authentication_realm: 
        :param str password_parameter: 
        :param int port: 
        :param int read_timeout_millis: 
        :param bool require_password_authentication: 
        :param bool use_basic_authentication: 
        :param bool use_chunking: 
        :param bool use_cookie_authentication: 
        :param bool use_device_ip: 
        :param bool use_digest_authentication: 
        :param bool use_form_post_authentication: 
        :param bool use_kerberos_authentication: 
        :param str username_parameter: 
        :return: HttpListenerPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_or_update_policy_with_http_info(id, **kwargs)
        else:
            (data) = self.create_or_update_policy_with_http_info(id, **kwargs)
            return data

    def create_or_update_policy_with_http_info(self, id, **kwargs):
        """
        creates or updates the HTTP Listener Policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_or_update_policy_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str acl_policy: 
        :param str description: 
        :param bool enabled: 
        :param str error_template: 
        :param str interface: 
        :param str ip_acl_policy: 
        :param str listener_host: 
        :param bool listener_ssl_enabled: 
        :param str listener_ssl_policy: 
        :param str name: 
        :param str password_authentication_realm: 
        :param str password_parameter: 
        :param int port: 
        :param int read_timeout_millis: 
        :param bool require_password_authentication: 
        :param bool use_basic_authentication: 
        :param bool use_chunking: 
        :param bool use_cookie_authentication: 
        :param bool use_device_ip: 
        :param bool use_digest_authentication: 
        :param bool use_form_post_authentication: 
        :param bool use_kerberos_authentication: 
        :param str username_parameter: 
        :return: HttpListenerPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'acl_policy', 'description', 'enabled', 'error_template', 'interface', 'ip_acl_policy', 'listener_host', 'listener_ssl_enabled', 'listener_ssl_policy', 'name', 'password_authentication_realm', 'password_parameter', 'port', 'read_timeout_millis', 'require_password_authentication', 'use_basic_authentication', 'use_chunking', 'use_cookie_authentication', 'use_device_ip', 'use_digest_authentication', 'use_form_post_authentication', 'use_kerberos_authentication', 'username_parameter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_or_update_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `create_or_update_policy`")

        resource_path = '/policies/httpListenerPolicies/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'acl_policy' in params:
            form_params.append(('aclPolicy', params['acl_policy']))
        if 'description' in params:
            form_params.append(('description', params['description']))
        if 'enabled' in params:
            form_params.append(('enabled', params['enabled']))
        if 'error_template' in params:
            form_params.append(('errorTemplate', params['error_template']))
        if 'interface' in params:
            form_params.append(('interface', params['interface']))
        if 'ip_acl_policy' in params:
            form_params.append(('ipAclPolicy', params['ip_acl_policy']))
        if 'listener_host' in params:
            form_params.append(('listenerHost', params['listener_host']))
        if 'listener_ssl_enabled' in params:
            form_params.append(('listenerSSLEnabled', params['listener_ssl_enabled']))
        if 'listener_ssl_policy' in params:
            form_params.append(('listenerSSLPolicy', params['listener_ssl_policy']))
        if 'name' in params:
            form_params.append(('name', params['name']))
        if 'password_authentication_realm' in params:
            form_params.append(('passwordAuthenticationRealm', params['password_authentication_realm']))
        if 'password_parameter' in params:
            form_params.append(('passwordParameter', params['password_parameter']))
        if 'port' in params:
            form_params.append(('port', params['port']))
        if 'read_timeout_millis' in params:
            form_params.append(('readTimeoutMillis', params['read_timeout_millis']))
        if 'require_password_authentication' in params:
            form_params.append(('requirePasswordAuthentication', params['require_password_authentication']))
        if 'use_basic_authentication' in params:
            form_params.append(('useBasicAuthentication', params['use_basic_authentication']))
        if 'use_chunking' in params:
            form_params.append(('useChunking', params['use_chunking']))
        if 'use_cookie_authentication' in params:
            form_params.append(('useCookieAuthentication', params['use_cookie_authentication']))
        if 'use_device_ip' in params:
            form_params.append(('useDeviceIp', params['use_device_ip']))
        if 'use_digest_authentication' in params:
            form_params.append(('useDigestAuthentication', params['use_digest_authentication']))
        if 'use_form_post_authentication' in params:
            form_params.append(('useFormPostAuthentication', params['use_form_post_authentication']))
        if 'use_kerberos_authentication' in params:
            form_params.append(('useKerberosAuthentication', params['use_kerberos_authentication']))
        if 'username_parameter' in params:
            form_params.append(('usernameParameter', params['username_parameter']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='HttpListenerPolicy',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_policy(self, name, **kwargs):
        """
        creates a new HTTP Listener Policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_policy(name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name:  (required)
        :param str acl_policy: 
        :param str description: 
        :param bool enabled: 
        :param str error_template: 
        :param str interface: 
        :param str ip_acl_policy: 
        :param str listener_host: 
        :param bool listener_ssl_enabled: 
        :param str listener_ssl_policy: 
        :param str password_authentication_realm: 
        :param str password_parameter: 
        :param int port: 
        :param int read_timeout_millis: 
        :param bool require_password_authentication: 
        :param bool use_basic_authentication: 
        :param bool use_chunking: 
        :param bool use_cookie_authentication: 
        :param bool use_device_ip: 
        :param bool use_digest_authentication: 
        :param bool use_form_post_authentication: 
        :param bool use_kerberos_authentication: 
        :param str username_parameter: 
        :return: HttpListenerPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_policy_with_http_info(name, **kwargs)
        else:
            (data) = self.create_policy_with_http_info(name, **kwargs)
            return data

    def create_policy_with_http_info(self, name, **kwargs):
        """
        creates a new HTTP Listener Policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_policy_with_http_info(name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name:  (required)
        :param str acl_policy: 
        :param str description: 
        :param bool enabled: 
        :param str error_template: 
        :param str interface: 
        :param str ip_acl_policy: 
        :param str listener_host: 
        :param bool listener_ssl_enabled: 
        :param str listener_ssl_policy: 
        :param str password_authentication_realm: 
        :param str password_parameter: 
        :param int port: 
        :param int read_timeout_millis: 
        :param bool require_password_authentication: 
        :param bool use_basic_authentication: 
        :param bool use_chunking: 
        :param bool use_cookie_authentication: 
        :param bool use_device_ip: 
        :param bool use_digest_authentication: 
        :param bool use_form_post_authentication: 
        :param bool use_kerberos_authentication: 
        :param str username_parameter: 
        :return: HttpListenerPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'acl_policy', 'description', 'enabled', 'error_template', 'interface', 'ip_acl_policy', 'listener_host', 'listener_ssl_enabled', 'listener_ssl_policy', 'password_authentication_realm', 'password_parameter', 'port', 'read_timeout_millis', 'require_password_authentication', 'use_basic_authentication', 'use_chunking', 'use_cookie_authentication', 'use_device_ip', 'use_digest_authentication', 'use_form_post_authentication', 'use_kerberos_authentication', 'username_parameter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_policy`")

        resource_path = '/policies/httpListenerPolicies'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))
        if 'acl_policy' in params:
            form_params.append(('aclPolicy', params['acl_policy']))
        if 'description' in params:
            form_params.append(('description', params['description']))
        if 'enabled' in params:
            form_params.append(('enabled', params['enabled']))
        if 'error_template' in params:
            form_params.append(('errorTemplate', params['error_template']))
        if 'interface' in params:
            form_params.append(('interface', params['interface']))
        if 'ip_acl_policy' in params:
            form_params.append(('ipAclPolicy', params['ip_acl_policy']))
        if 'listener_host' in params:
            form_params.append(('listenerHost', params['listener_host']))
        if 'listener_ssl_enabled' in params:
            form_params.append(('listenerSSLEnabled', params['listener_ssl_enabled']))
        if 'listener_ssl_policy' in params:
            form_params.append(('listenerSSLPolicy', params['listener_ssl_policy']))
        if 'password_authentication_realm' in params:
            form_params.append(('passwordAuthenticationRealm', params['password_authentication_realm']))
        if 'password_parameter' in params:
            form_params.append(('passwordParameter', params['password_parameter']))
        if 'port' in params:
            form_params.append(('port', params['port']))
        if 'read_timeout_millis' in params:
            form_params.append(('readTimeoutMillis', params['read_timeout_millis']))
        if 'require_password_authentication' in params:
            form_params.append(('requirePasswordAuthentication', params['require_password_authentication']))
        if 'use_basic_authentication' in params:
            form_params.append(('useBasicAuthentication', params['use_basic_authentication']))
        if 'use_chunking' in params:
            form_params.append(('useChunking', params['use_chunking']))
        if 'use_cookie_authentication' in params:
            form_params.append(('useCookieAuthentication', params['use_cookie_authentication']))
        if 'use_device_ip' in params:
            form_params.append(('useDeviceIp', params['use_device_ip']))
        if 'use_digest_authentication' in params:
            form_params.append(('useDigestAuthentication', params['use_digest_authentication']))
        if 'use_form_post_authentication' in params:
            form_params.append(('useFormPostAuthentication', params['use_form_post_authentication']))
        if 'use_kerberos_authentication' in params:
            form_params.append(('useKerberosAuthentication', params['use_kerberos_authentication']))
        if 'username_parameter' in params:
            form_params.append(('usernameParameter', params['username_parameter']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='HttpListenerPolicy',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_policy_copy(self, id, new_id, **kwargs):
        """
        creates a copy of the HTTP Listener Policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_policy_copy(id, new_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str new_id:  (required)
        :return: HttpListenerPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_policy_copy_with_http_info(id, new_id, **kwargs)
        else:
            (data) = self.create_policy_copy_with_http_info(id, new_id, **kwargs)
            return data

    def create_policy_copy_with_http_info(self, id, new_id, **kwargs):
        """
        creates a copy of the HTTP Listener Policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_policy_copy_with_http_info(id, new_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str new_id:  (required)
        :return: HttpListenerPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'new_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_policy_copy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `create_policy_copy`")
        # verify the required parameter 'new_id' is set
        if ('new_id' not in params) or (params['new_id'] is None):
            raise ValueError("Missing the required parameter `new_id` when calling `create_policy_copy`")

        resource_path = '/policies/httpListenerPolicies/{id}/copy'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'new_id' in params:
            query_params['newId'] = params['new_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='HttpListenerPolicy',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def export_fsg(self, id, password, **kwargs):
        """
        exports an fsg based on this policy to a file
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.export_fsg(id, password, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str password:  (required)
        :param str agent: 
        :return: JavaIoOutputStream
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.export_fsg_with_http_info(id, password, **kwargs)
        else:
            (data) = self.export_fsg_with_http_info(id, password, **kwargs)
            return data

    def export_fsg_with_http_info(self, id, password, **kwargs):
        """
        exports an fsg based on this policy to a file
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.export_fsg_with_http_info(id, password, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str password:  (required)
        :param str agent: 
        :return: JavaIoOutputStream
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'password', 'agent']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_fsg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `export_fsg`")
        # verify the required parameter 'password' is set
        if ('password' not in params) or (params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `export_fsg`")

        resource_path = '/policies/httpListenerPolicies/{id}/fsg'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'agent' in params:
            query_params['agent'] = params['agent']

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'password' in params:
            form_params.append(('password', params['password']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/octet-stream'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/xml', 'application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='JavaIoOutputStream',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_policy(self, id, **kwargs):
        """
        gets the HTTP Listener Policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_policy(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :return: HttpListenerPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_policy_with_http_info(id, **kwargs)
        else:
            (data) = self.get_policy_with_http_info(id, **kwargs)
            return data

    def get_policy_with_http_info(self, id, **kwargs):
        """
        gets the HTTP Listener Policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_policy_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :return: HttpListenerPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_policy`")

        resource_path = '/policies/httpListenerPolicies/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='HttpListenerPolicy',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_policy_list(self, **kwargs):
        """
        returns a list of policies
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_policy_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: PolicyList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_policy_list_with_http_info(**kwargs)
        else:
            (data) = self.get_policy_list_with_http_info(**kwargs)
            return data

    def get_policy_list_with_http_info(self, **kwargs):
        """
        returns a list of policies
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_policy_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: PolicyList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_policy_list" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/policies/httpListenerPolicies'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PolicyList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def remove_policy(self, id, **kwargs):
        """
        deletes the policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_policy(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.remove_policy_with_http_info(id, **kwargs)
        else:
            (data) = self.remove_policy_with_http_info(id, **kwargs)
            return data

    def remove_policy_with_http_info(self, id, **kwargs):
        """
        deletes the policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_policy_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_policy`")

        resource_path = '/policies/httpListenerPolicies/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def transfer_fsg(self, id, agent_group, **kwargs):
        """
        transfers an fsg based on this policy to the specified agent group
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.transfer_fsg(id, agent_group, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str agent_group:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.transfer_fsg_with_http_info(id, agent_group, **kwargs)
        else:
            (data) = self.transfer_fsg_with_http_info(id, agent_group, **kwargs)
            return data

    def transfer_fsg_with_http_info(self, id, agent_group, **kwargs):
        """
        transfers an fsg based on this policy to the specified agent group
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.transfer_fsg_with_http_info(id, agent_group, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str agent_group:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'agent_group']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transfer_fsg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `transfer_fsg`")
        # verify the required parameter 'agent_group' is set
        if ('agent_group' not in params) or (params['agent_group'] is None):
            raise ValueError("Missing the required parameter `agent_group` when calling `transfer_fsg`")

        resource_path = '/policies/httpListenerPolicies/{id}/transfer'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'agent_group' in params:
            query_params['agentGroup'] = params['agent_group']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
