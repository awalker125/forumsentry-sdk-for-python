# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from forumsentry_api.api_client import ApiClient


class PoliciesldapPoliciesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_or_update_policy(self, id, **kwargs):  # noqa: E501
        """creates or updates the LDAP Policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_or_update_policy(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str authentication_type:
        :param int cache_timeout:
        :param str certificate_id:
        :param str context:
        :param str context_type:
        :param str description:
        :param str dn_id:
        :param str email_id:
        :param bool enabled:
        :param str filter_id:
        :param str filter_value:
        :param str group_id:
        :param str host:
        :param str name:
        :param str password_id:
        :param int port:
        :param str principal:
        :param int read_timeout_minutes:
        :param str referral_processing:
        :param bool restrict_menus:
        :param str role_policy:
        :param str search_scope:
        :param str user_id:
        :param bool use_ssl:
        :return: LdapPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_or_update_policy_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_or_update_policy_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def create_or_update_policy_with_http_info(self, id, **kwargs):  # noqa: E501
        """creates or updates the LDAP Policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_or_update_policy_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str authentication_type:
        :param int cache_timeout:
        :param str certificate_id:
        :param str context:
        :param str context_type:
        :param str description:
        :param str dn_id:
        :param str email_id:
        :param bool enabled:
        :param str filter_id:
        :param str filter_value:
        :param str group_id:
        :param str host:
        :param str name:
        :param str password_id:
        :param int port:
        :param str principal:
        :param int read_timeout_minutes:
        :param str referral_processing:
        :param bool restrict_menus:
        :param str role_policy:
        :param str search_scope:
        :param str user_id:
        :param bool use_ssl:
        :return: LdapPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authentication_type', 'cache_timeout', 'certificate_id', 'context', 'context_type', 'description', 'dn_id', 'email_id', 'enabled', 'filter_id', 'filter_value', 'group_id', 'host', 'name', 'password_id', 'port', 'principal', 'read_timeout_minutes', 'referral_processing', 'restrict_menus', 'role_policy', 'search_scope', 'user_id', 'use_ssl']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_or_update_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `create_or_update_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'authentication_type' in params:
            form_params.append(('authenticationType', params['authentication_type']))  # noqa: E501
        if 'cache_timeout' in params:
            form_params.append(('cacheTimeout', params['cache_timeout']))  # noqa: E501
        if 'certificate_id' in params:
            form_params.append(('certificateId', params['certificate_id']))  # noqa: E501
        if 'context' in params:
            form_params.append(('context', params['context']))  # noqa: E501
        if 'context_type' in params:
            form_params.append(('contextType', params['context_type']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'dn_id' in params:
            form_params.append(('dnId', params['dn_id']))  # noqa: E501
        if 'email_id' in params:
            form_params.append(('emailId', params['email_id']))  # noqa: E501
        if 'enabled' in params:
            form_params.append(('enabled', params['enabled']))  # noqa: E501
        if 'filter_id' in params:
            form_params.append(('filterId', params['filter_id']))  # noqa: E501
        if 'filter_value' in params:
            form_params.append(('filterValue', params['filter_value']))  # noqa: E501
        if 'group_id' in params:
            form_params.append(('groupId', params['group_id']))  # noqa: E501
        if 'host' in params:
            form_params.append(('host', params['host']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'password_id' in params:
            form_params.append(('passwordId', params['password_id']))  # noqa: E501
        if 'port' in params:
            form_params.append(('port', params['port']))  # noqa: E501
        if 'principal' in params:
            form_params.append(('principal', params['principal']))  # noqa: E501
        if 'read_timeout_minutes' in params:
            form_params.append(('readTimeoutMinutes', params['read_timeout_minutes']))  # noqa: E501
        if 'referral_processing' in params:
            form_params.append(('referralProcessing', params['referral_processing']))  # noqa: E501
        if 'restrict_menus' in params:
            form_params.append(('restrictMenus', params['restrict_menus']))  # noqa: E501
        if 'role_policy' in params:
            form_params.append(('rolePolicy', params['role_policy']))  # noqa: E501
        if 'search_scope' in params:
            form_params.append(('searchScope', params['search_scope']))  # noqa: E501
        if 'user_id' in params:
            form_params.append(('userId', params['user_id']))  # noqa: E501
        if 'use_ssl' in params:
            form_params.append(('useSsl', params['use_ssl']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/policies/ldapPolicies/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LdapPolicy',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_policy(self, name, **kwargs):  # noqa: E501
        """creates a new LDAP Policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_policy(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: (required)
        :param str authentication_type:
        :param int cache_timeout:
        :param str certificate_id:
        :param str context:
        :param str context_type:
        :param str description:
        :param str dn_id:
        :param str email_id:
        :param bool enabled:
        :param str filter_id:
        :param str filter_value:
        :param str group_id:
        :param str host:
        :param str password_id:
        :param int port:
        :param str principal:
        :param int read_timeout_minutes:
        :param str referral_processing:
        :param bool restrict_menus:
        :param str role_policy:
        :param str search_scope:
        :param str user_id:
        :param bool use_ssl:
        :return: LdapPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_policy_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_policy_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def create_policy_with_http_info(self, name, **kwargs):  # noqa: E501
        """creates a new LDAP Policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_policy_with_http_info(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: (required)
        :param str authentication_type:
        :param int cache_timeout:
        :param str certificate_id:
        :param str context:
        :param str context_type:
        :param str description:
        :param str dn_id:
        :param str email_id:
        :param bool enabled:
        :param str filter_id:
        :param str filter_value:
        :param str group_id:
        :param str host:
        :param str password_id:
        :param int port:
        :param str principal:
        :param int read_timeout_minutes:
        :param str referral_processing:
        :param bool restrict_menus:
        :param str role_policy:
        :param str search_scope:
        :param str user_id:
        :param bool use_ssl:
        :return: LdapPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'authentication_type', 'cache_timeout', 'certificate_id', 'context', 'context_type', 'description', 'dn_id', 'email_id', 'enabled', 'filter_id', 'filter_value', 'group_id', 'host', 'password_id', 'port', 'principal', 'read_timeout_minutes', 'referral_processing', 'restrict_menus', 'role_policy', 'search_scope', 'user_id', 'use_ssl']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'authentication_type' in params:
            form_params.append(('authenticationType', params['authentication_type']))  # noqa: E501
        if 'cache_timeout' in params:
            form_params.append(('cacheTimeout', params['cache_timeout']))  # noqa: E501
        if 'certificate_id' in params:
            form_params.append(('certificateId', params['certificate_id']))  # noqa: E501
        if 'context' in params:
            form_params.append(('context', params['context']))  # noqa: E501
        if 'context_type' in params:
            form_params.append(('contextType', params['context_type']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'dn_id' in params:
            form_params.append(('dnId', params['dn_id']))  # noqa: E501
        if 'email_id' in params:
            form_params.append(('emailId', params['email_id']))  # noqa: E501
        if 'enabled' in params:
            form_params.append(('enabled', params['enabled']))  # noqa: E501
        if 'filter_id' in params:
            form_params.append(('filterId', params['filter_id']))  # noqa: E501
        if 'filter_value' in params:
            form_params.append(('filterValue', params['filter_value']))  # noqa: E501
        if 'group_id' in params:
            form_params.append(('groupId', params['group_id']))  # noqa: E501
        if 'host' in params:
            form_params.append(('host', params['host']))  # noqa: E501
        if 'password_id' in params:
            form_params.append(('passwordId', params['password_id']))  # noqa: E501
        if 'port' in params:
            form_params.append(('port', params['port']))  # noqa: E501
        if 'principal' in params:
            form_params.append(('principal', params['principal']))  # noqa: E501
        if 'read_timeout_minutes' in params:
            form_params.append(('readTimeoutMinutes', params['read_timeout_minutes']))  # noqa: E501
        if 'referral_processing' in params:
            form_params.append(('referralProcessing', params['referral_processing']))  # noqa: E501
        if 'restrict_menus' in params:
            form_params.append(('restrictMenus', params['restrict_menus']))  # noqa: E501
        if 'role_policy' in params:
            form_params.append(('rolePolicy', params['role_policy']))  # noqa: E501
        if 'search_scope' in params:
            form_params.append(('searchScope', params['search_scope']))  # noqa: E501
        if 'user_id' in params:
            form_params.append(('userId', params['user_id']))  # noqa: E501
        if 'use_ssl' in params:
            form_params.append(('useSsl', params['use_ssl']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/policies/ldapPolicies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LdapPolicy',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_policy_copy(self, id, new_id, **kwargs):  # noqa: E501
        """creates a copy of the LDAP Policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_policy_copy(id, new_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str new_id: (required)
        :return: LdapPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_policy_copy_with_http_info(id, new_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_policy_copy_with_http_info(id, new_id, **kwargs)  # noqa: E501
            return data

    def create_policy_copy_with_http_info(self, id, new_id, **kwargs):  # noqa: E501
        """creates a copy of the LDAP Policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_policy_copy_with_http_info(id, new_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str new_id: (required)
        :return: LdapPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'new_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_policy_copy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `create_policy_copy`")  # noqa: E501
        # verify the required parameter 'new_id' is set
        if ('new_id' not in params or
                params['new_id'] is None):
            raise ValueError("Missing the required parameter `new_id` when calling `create_policy_copy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'new_id' in params:
            query_params.append(('newId', params['new_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/policies/ldapPolicies/{id}/copy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LdapPolicy',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_fsg(self, id, password, **kwargs):  # noqa: E501
        """exports an fsg based on this policy to a file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.export_fsg(id, password, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str password: (required)
        :param str agent:
        :return: JavaIoOutputStream
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.export_fsg_with_http_info(id, password, **kwargs)  # noqa: E501
        else:
            (data) = self.export_fsg_with_http_info(id, password, **kwargs)  # noqa: E501
            return data

    def export_fsg_with_http_info(self, id, password, **kwargs):  # noqa: E501
        """exports an fsg based on this policy to a file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.export_fsg_with_http_info(id, password, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str password: (required)
        :param str agent:
        :return: JavaIoOutputStream
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'password', 'agent']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_fsg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `export_fsg`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `export_fsg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'agent' in params:
            query_params.append(('agent', params['agent']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/policies/ldapPolicies/{id}/fsg', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JavaIoOutputStream',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_policy(self, id, **kwargs):  # noqa: E501
        """gets the LDAP Policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_policy(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :return: LdapPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_policy_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_policy_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_policy_with_http_info(self, id, **kwargs):  # noqa: E501
        """gets the LDAP Policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_policy_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :return: LdapPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/policies/ldapPolicies/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LdapPolicy',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_policy_list(self, **kwargs):  # noqa: E501
        """returns a list of policies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_policy_list(async=True)
        >>> result = thread.get()

        :param async bool
        :return: PolicyList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_policy_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_policy_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_policy_list_with_http_info(self, **kwargs):  # noqa: E501
        """returns a list of policies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_policy_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: PolicyList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_policy_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/policies/ldapPolicies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PolicyList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_policy(self, id, **kwargs):  # noqa: E501
        """deletes the policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_policy(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_policy_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_policy_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def remove_policy_with_http_info(self, id, **kwargs):  # noqa: E501
        """deletes the policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_policy_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/policies/ldapPolicies/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def transfer_fsg(self, id, agent_group, **kwargs):  # noqa: E501
        """transfers an fsg based on this policy to the specified agent group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.transfer_fsg(id, agent_group, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str agent_group: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.transfer_fsg_with_http_info(id, agent_group, **kwargs)  # noqa: E501
        else:
            (data) = self.transfer_fsg_with_http_info(id, agent_group, **kwargs)  # noqa: E501
            return data

    def transfer_fsg_with_http_info(self, id, agent_group, **kwargs):  # noqa: E501
        """transfers an fsg based on this policy to the specified agent group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.transfer_fsg_with_http_info(id, agent_group, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str agent_group: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'agent_group']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transfer_fsg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `transfer_fsg`")  # noqa: E501
        # verify the required parameter 'agent_group' is set
        if ('agent_group' not in params or
                params['agent_group'] is None):
            raise ValueError("Missing the required parameter `agent_group` when calling `transfer_fsg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'agent_group' in params:
            query_params.append(('agentGroup', params['agent_group']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/policies/ldapPolicies/{id}/transfer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
