# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class PolicieshtmlPoliciesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_fs_project_node_copy(self, id, new_id, **kwargs):
        """
        creates a copy of the HTML Policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_fs_project_node_copy(id, new_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str new_id:  (required)
        :return: HtmlPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_fs_project_node_copy_with_http_info(id, new_id, **kwargs)
        else:
            (data) = self.create_fs_project_node_copy_with_http_info(id, new_id, **kwargs)
            return data

    def create_fs_project_node_copy_with_http_info(self, id, new_id, **kwargs):
        """
        creates a copy of the HTML Policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_fs_project_node_copy_with_http_info(id, new_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str new_id:  (required)
        :return: HtmlPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'new_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_fs_project_node_copy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `create_fs_project_node_copy`")
        # verify the required parameter 'new_id' is set
        if ('new_id' not in params) or (params['new_id'] is None):
            raise ValueError("Missing the required parameter `new_id` when calling `create_fs_project_node_copy`")

        resource_path = '/policies/htmlPolicies/{id}/copy'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'new_id' in params:
            query_params['newId'] = params['new_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='HtmlPolicy',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_or_update_policy(self, id, virtual_directory_id, **kwargs):
        """
        creates or updates the Virtual Directory
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_or_update_policy(id, virtual_directory_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str virtual_directory_id:  (required)
        :param str acl_policy: 
        :param str description: 
        :param bool enabled: 
        :param str error_template: 
        :param str listener_policy: 
        :param str name: 
        :param str remote_path: 
        :param str remote_policy: 
        :param str request_filter_policy: 
        :param str request_process: 
        :param str request_process_type: 
        :param str response_process: 
        :param str response_process_type: 
        :param bool use_remote_policy: 
        :param str virtual_host: 
        :param str virtual_path: 
        :return: VirtualDirectory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_or_update_policy_with_http_info(id, virtual_directory_id, **kwargs)
        else:
            (data) = self.create_or_update_policy_with_http_info(id, virtual_directory_id, **kwargs)
            return data

    def create_or_update_policy_with_http_info(self, id, virtual_directory_id, **kwargs):
        """
        creates or updates the Virtual Directory
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_or_update_policy_with_http_info(id, virtual_directory_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str virtual_directory_id:  (required)
        :param str acl_policy: 
        :param str description: 
        :param bool enabled: 
        :param str error_template: 
        :param str listener_policy: 
        :param str name: 
        :param str remote_path: 
        :param str remote_policy: 
        :param str request_filter_policy: 
        :param str request_process: 
        :param str request_process_type: 
        :param str response_process: 
        :param str response_process_type: 
        :param bool use_remote_policy: 
        :param str virtual_host: 
        :param str virtual_path: 
        :return: VirtualDirectory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'virtual_directory_id', 'acl_policy', 'description', 'enabled', 'error_template', 'listener_policy', 'name', 'remote_path', 'remote_policy', 'request_filter_policy', 'request_process', 'request_process_type', 'response_process', 'response_process_type', 'use_remote_policy', 'virtual_host', 'virtual_path']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_or_update_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `create_or_update_policy`")
        # verify the required parameter 'virtual_directory_id' is set
        if ('virtual_directory_id' not in params) or (params['virtual_directory_id'] is None):
            raise ValueError("Missing the required parameter `virtual_directory_id` when calling `create_or_update_policy`")

        resource_path = '/policies/htmlPolicies/{id}/virtualDirectories/{virtualDirectoryId}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'virtual_directory_id' in params:
            path_params['virtualDirectoryId'] = params['virtual_directory_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'acl_policy' in params:
            form_params.append(('aclPolicy', params['acl_policy']))
        if 'description' in params:
            form_params.append(('description', params['description']))
        if 'enabled' in params:
            form_params.append(('enabled', params['enabled']))
        if 'error_template' in params:
            form_params.append(('errorTemplate', params['error_template']))
        if 'listener_policy' in params:
            form_params.append(('listenerPolicy', params['listener_policy']))
        if 'name' in params:
            form_params.append(('name', params['name']))
        if 'remote_path' in params:
            form_params.append(('remotePath', params['remote_path']))
        if 'remote_policy' in params:
            form_params.append(('remotePolicy', params['remote_policy']))
        if 'request_filter_policy' in params:
            form_params.append(('requestFilterPolicy', params['request_filter_policy']))
        if 'request_process' in params:
            form_params.append(('requestProcess', params['request_process']))
        if 'request_process_type' in params:
            form_params.append(('requestProcessType', params['request_process_type']))
        if 'response_process' in params:
            form_params.append(('responseProcess', params['response_process']))
        if 'response_process_type' in params:
            form_params.append(('responseProcessType', params['response_process_type']))
        if 'use_remote_policy' in params:
            form_params.append(('useRemotePolicy', params['use_remote_policy']))
        if 'virtual_host' in params:
            form_params.append(('virtualHost', params['virtual_host']))
        if 'virtual_path' in params:
            form_params.append(('virtualPath', params['virtual_path']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VirtualDirectory',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_or_update_policy_0(self, id, **kwargs):
        """
        creates or updates the HTML Policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_or_update_policy_0(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str description: 
        :param str idp_group: 
        :param str listener_policy: 
        :param str name: 
        :param str remote_path: 
        :param str remote_policy: 
        :param str request_process: 
        :param str request_process_type: 
        :param str response_process: 
        :param str response_process_type: 
        :param str virtual_path: 
        :return: HtmlPolicies
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_or_update_policy_0_with_http_info(id, **kwargs)
        else:
            (data) = self.create_or_update_policy_0_with_http_info(id, **kwargs)
            return data

    def create_or_update_policy_0_with_http_info(self, id, **kwargs):
        """
        creates or updates the HTML Policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_or_update_policy_0_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str description: 
        :param str idp_group: 
        :param str listener_policy: 
        :param str name: 
        :param str remote_path: 
        :param str remote_policy: 
        :param str request_process: 
        :param str request_process_type: 
        :param str response_process: 
        :param str response_process_type: 
        :param str virtual_path: 
        :return: HtmlPolicies
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'description', 'idp_group', 'listener_policy', 'name', 'remote_path', 'remote_policy', 'request_process', 'request_process_type', 'response_process', 'response_process_type', 'virtual_path']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_or_update_policy_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `create_or_update_policy_0`")

        resource_path = '/policies/htmlPolicies/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'description' in params:
            form_params.append(('description', params['description']))
        if 'idp_group' in params:
            form_params.append(('idpGroup', params['idp_group']))
        if 'listener_policy' in params:
            form_params.append(('listenerPolicy', params['listener_policy']))
        if 'name' in params:
            form_params.append(('name', params['name']))
        if 'remote_path' in params:
            form_params.append(('remotePath', params['remote_path']))
        if 'remote_policy' in params:
            form_params.append(('remotePolicy', params['remote_policy']))
        if 'request_process' in params:
            form_params.append(('requestProcess', params['request_process']))
        if 'request_process_type' in params:
            form_params.append(('requestProcessType', params['request_process_type']))
        if 'response_process' in params:
            form_params.append(('responseProcess', params['response_process']))
        if 'response_process_type' in params:
            form_params.append(('responseProcessType', params['response_process_type']))
        if 'virtual_path' in params:
            form_params.append(('virtualPath', params['virtual_path']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='HtmlPolicies',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_policy(self, name, **kwargs):
        """
        creates a new HTML Policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_policy(name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name:  (required)
        :param str description: 
        :param str idp_group: 
        :param str listener_policy: 
        :param str remote_path: 
        :param str remote_policy: 
        :param str request_process: 
        :param str request_process_type: 
        :param str response_process: 
        :param str response_process_type: 
        :param str virtual_path: 
        :return: HtmlPolicies
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_policy_with_http_info(name, **kwargs)
        else:
            (data) = self.create_policy_with_http_info(name, **kwargs)
            return data

    def create_policy_with_http_info(self, name, **kwargs):
        """
        creates a new HTML Policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_policy_with_http_info(name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name:  (required)
        :param str description: 
        :param str idp_group: 
        :param str listener_policy: 
        :param str remote_path: 
        :param str remote_policy: 
        :param str request_process: 
        :param str request_process_type: 
        :param str response_process: 
        :param str response_process_type: 
        :param str virtual_path: 
        :return: HtmlPolicies
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'description', 'idp_group', 'listener_policy', 'remote_path', 'remote_policy', 'request_process', 'request_process_type', 'response_process', 'response_process_type', 'virtual_path']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_policy`")

        resource_path = '/policies/htmlPolicies'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))
        if 'description' in params:
            form_params.append(('description', params['description']))
        if 'idp_group' in params:
            form_params.append(('idpGroup', params['idp_group']))
        if 'listener_policy' in params:
            form_params.append(('listenerPolicy', params['listener_policy']))
        if 'remote_path' in params:
            form_params.append(('remotePath', params['remote_path']))
        if 'remote_policy' in params:
            form_params.append(('remotePolicy', params['remote_policy']))
        if 'request_process' in params:
            form_params.append(('requestProcess', params['request_process']))
        if 'request_process_type' in params:
            form_params.append(('requestProcessType', params['request_process_type']))
        if 'response_process' in params:
            form_params.append(('responseProcess', params['response_process']))
        if 'response_process_type' in params:
            form_params.append(('responseProcessType', params['response_process_type']))
        if 'virtual_path' in params:
            form_params.append(('virtualPath', params['virtual_path']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='HtmlPolicies',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_policy_0(self, id, listener_policy, name, **kwargs):
        """
        creates a new Virtual Directory
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_policy_0(id, listener_policy, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str listener_policy:  (required)
        :param str name:  (required)
        :param str acl_policy: 
        :param str description: 
        :param bool enabled: 
        :param str error_template: 
        :param str remote_path: 
        :param str remote_policy: 
        :param str request_filter_policy: 
        :param str request_process: 
        :param str request_process_type: 
        :param str response_process: 
        :param str response_process_type: 
        :param bool use_remote_policy: 
        :param str virtual_host: 
        :param str virtual_path: 
        :return: VirtualDirectory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_policy_0_with_http_info(id, listener_policy, name, **kwargs)
        else:
            (data) = self.create_policy_0_with_http_info(id, listener_policy, name, **kwargs)
            return data

    def create_policy_0_with_http_info(self, id, listener_policy, name, **kwargs):
        """
        creates a new Virtual Directory
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_policy_0_with_http_info(id, listener_policy, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str listener_policy:  (required)
        :param str name:  (required)
        :param str acl_policy: 
        :param str description: 
        :param bool enabled: 
        :param str error_template: 
        :param str remote_path: 
        :param str remote_policy: 
        :param str request_filter_policy: 
        :param str request_process: 
        :param str request_process_type: 
        :param str response_process: 
        :param str response_process_type: 
        :param bool use_remote_policy: 
        :param str virtual_host: 
        :param str virtual_path: 
        :return: VirtualDirectory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'listener_policy', 'name', 'acl_policy', 'description', 'enabled', 'error_template', 'remote_path', 'remote_policy', 'request_filter_policy', 'request_process', 'request_process_type', 'response_process', 'response_process_type', 'use_remote_policy', 'virtual_host', 'virtual_path']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_policy_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `create_policy_0`")
        # verify the required parameter 'listener_policy' is set
        if ('listener_policy' not in params) or (params['listener_policy'] is None):
            raise ValueError("Missing the required parameter `listener_policy` when calling `create_policy_0`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_policy_0`")

        resource_path = '/policies/htmlPolicies/{id}/virtualDirectories'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'listener_policy' in params:
            form_params.append(('listenerPolicy', params['listener_policy']))
        if 'name' in params:
            form_params.append(('name', params['name']))
        if 'acl_policy' in params:
            form_params.append(('aclPolicy', params['acl_policy']))
        if 'description' in params:
            form_params.append(('description', params['description']))
        if 'enabled' in params:
            form_params.append(('enabled', params['enabled']))
        if 'error_template' in params:
            form_params.append(('errorTemplate', params['error_template']))
        if 'remote_path' in params:
            form_params.append(('remotePath', params['remote_path']))
        if 'remote_policy' in params:
            form_params.append(('remotePolicy', params['remote_policy']))
        if 'request_filter_policy' in params:
            form_params.append(('requestFilterPolicy', params['request_filter_policy']))
        if 'request_process' in params:
            form_params.append(('requestProcess', params['request_process']))
        if 'request_process_type' in params:
            form_params.append(('requestProcessType', params['request_process_type']))
        if 'response_process' in params:
            form_params.append(('responseProcess', params['response_process']))
        if 'response_process_type' in params:
            form_params.append(('responseProcessType', params['response_process_type']))
        if 'use_remote_policy' in params:
            form_params.append(('useRemotePolicy', params['use_remote_policy']))
        if 'virtual_host' in params:
            form_params.append(('virtualHost', params['virtual_host']))
        if 'virtual_path' in params:
            form_params.append(('virtualPath', params['virtual_path']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VirtualDirectory',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def export_fsg(self, id, password, **kwargs):
        """
        exports an fsg based on this policy to a file
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.export_fsg(id, password, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str password:  (required)
        :param str agent: 
        :return: JavaIoOutputStream
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.export_fsg_with_http_info(id, password, **kwargs)
        else:
            (data) = self.export_fsg_with_http_info(id, password, **kwargs)
            return data

    def export_fsg_with_http_info(self, id, password, **kwargs):
        """
        exports an fsg based on this policy to a file
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.export_fsg_with_http_info(id, password, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str password:  (required)
        :param str agent: 
        :return: JavaIoOutputStream
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'password', 'agent']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_fsg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `export_fsg`")
        # verify the required parameter 'password' is set
        if ('password' not in params) or (params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `export_fsg`")

        resource_path = '/policies/htmlPolicies/{id}/fsg'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'agent' in params:
            query_params['agent'] = params['agent']

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'password' in params:
            form_params.append(('password', params['password']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/octet-stream'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/xml', 'application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='JavaIoOutputStream',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_policy(self, id, virtual_directory_id, **kwargs):
        """
        gets the Virtual Directory
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_policy(id, virtual_directory_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str virtual_directory_id:  (required)
        :return: VirtualDirectory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_policy_with_http_info(id, virtual_directory_id, **kwargs)
        else:
            (data) = self.get_policy_with_http_info(id, virtual_directory_id, **kwargs)
            return data

    def get_policy_with_http_info(self, id, virtual_directory_id, **kwargs):
        """
        gets the Virtual Directory
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_policy_with_http_info(id, virtual_directory_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str virtual_directory_id:  (required)
        :return: VirtualDirectory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'virtual_directory_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_policy`")
        # verify the required parameter 'virtual_directory_id' is set
        if ('virtual_directory_id' not in params) or (params['virtual_directory_id'] is None):
            raise ValueError("Missing the required parameter `virtual_directory_id` when calling `get_policy`")

        resource_path = '/policies/htmlPolicies/{id}/virtualDirectories/{virtualDirectoryId}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'virtual_directory_id' in params:
            path_params['virtualDirectoryId'] = params['virtual_directory_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VirtualDirectory',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_policy_0(self, id, **kwargs):
        """
        gets the HTML Policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_policy_0(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :return: HtmlPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_policy_0_with_http_info(id, **kwargs)
        else:
            (data) = self.get_policy_0_with_http_info(id, **kwargs)
            return data

    def get_policy_0_with_http_info(self, id, **kwargs):
        """
        gets the HTML Policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_policy_0_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :return: HtmlPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_policy_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_policy_0`")

        resource_path = '/policies/htmlPolicies/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='HtmlPolicy',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_policy_list(self, **kwargs):
        """
        returns a list of policies
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_policy_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: PolicyList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_policy_list_with_http_info(**kwargs)
        else:
            (data) = self.get_policy_list_with_http_info(**kwargs)
            return data

    def get_policy_list_with_http_info(self, **kwargs):
        """
        returns a list of policies
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_policy_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: PolicyList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_policy_list" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/policies/htmlPolicies'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PolicyList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_policy_list_0(self, id, **kwargs):
        """
        returns a list of this policyLists virtual directories
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_policy_list_0(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :return: PolicyList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_policy_list_0_with_http_info(id, **kwargs)
        else:
            (data) = self.get_policy_list_0_with_http_info(id, **kwargs)
            return data

    def get_policy_list_0_with_http_info(self, id, **kwargs):
        """
        returns a list of this policyLists virtual directories
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_policy_list_0_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :return: PolicyList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_policy_list_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_policy_list_0`")

        resource_path = '/policies/htmlPolicies/{id}/virtualDirectories'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PolicyList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def remove_policy(self, id, virtual_directory_id, **kwargs):
        """
        deletes the policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_policy(id, virtual_directory_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str virtual_directory_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.remove_policy_with_http_info(id, virtual_directory_id, **kwargs)
        else:
            (data) = self.remove_policy_with_http_info(id, virtual_directory_id, **kwargs)
            return data

    def remove_policy_with_http_info(self, id, virtual_directory_id, **kwargs):
        """
        deletes the policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_policy_with_http_info(id, virtual_directory_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str virtual_directory_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'virtual_directory_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_policy`")
        # verify the required parameter 'virtual_directory_id' is set
        if ('virtual_directory_id' not in params) or (params['virtual_directory_id'] is None):
            raise ValueError("Missing the required parameter `virtual_directory_id` when calling `remove_policy`")

        resource_path = '/policies/htmlPolicies/{id}/virtualDirectories/{virtualDirectoryId}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'virtual_directory_id' in params:
            path_params['virtualDirectoryId'] = params['virtual_directory_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def remove_policy_0(self, id, **kwargs):
        """
        deletes the policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_policy_0(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.remove_policy_0_with_http_info(id, **kwargs)
        else:
            (data) = self.remove_policy_0_with_http_info(id, **kwargs)
            return data

    def remove_policy_0_with_http_info(self, id, **kwargs):
        """
        deletes the policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_policy_0_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_policy_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_policy_0`")

        resource_path = '/policies/htmlPolicies/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def transfer_fsg(self, id, agent_group, **kwargs):
        """
        transfers an fsg based on this policy to the specified agent group
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.transfer_fsg(id, agent_group, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str agent_group:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.transfer_fsg_with_http_info(id, agent_group, **kwargs)
        else:
            (data) = self.transfer_fsg_with_http_info(id, agent_group, **kwargs)
            return data

    def transfer_fsg_with_http_info(self, id, agent_group, **kwargs):
        """
        transfers an fsg based on this policy to the specified agent group
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.transfer_fsg_with_http_info(id, agent_group, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str agent_group:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'agent_group']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transfer_fsg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `transfer_fsg`")
        # verify the required parameter 'agent_group' is set
        if ('agent_group' not in params) or (params['agent_group'] is None):
            raise ValueError("Missing the required parameter `agent_group` when calling `transfer_fsg`")

        resource_path = '/policies/htmlPolicies/{id}/transfer'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'agent_group' in params:
            query_params['agentGroup'] = params['agent_group']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
