# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class PolicieswsdlPoliciesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_fs_project_node_copy(self, id, new_id, **kwargs):
        """
        creates a copy of the WSDL Policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_fs_project_node_copy(id, new_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str new_id:  (required)
        :return: WsdlPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_fs_project_node_copy_with_http_info(id, new_id, **kwargs)
        else:
            (data) = self.create_fs_project_node_copy_with_http_info(id, new_id, **kwargs)
            return data

    def create_fs_project_node_copy_with_http_info(self, id, new_id, **kwargs):
        """
        creates a copy of the WSDL Policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_fs_project_node_copy_with_http_info(id, new_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str new_id:  (required)
        :return: WsdlPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'new_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_fs_project_node_copy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `create_fs_project_node_copy`")
        # verify the required parameter 'new_id' is set
        if ('new_id' not in params) or (params['new_id'] is None):
            raise ValueError("Missing the required parameter `new_id` when calling `create_fs_project_node_copy`")

        resource_path = '/policies/wsdlPolicies/{id}/copy'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'new_id' in params:
            query_params['newId'] = params['new_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='WsdlPolicy',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_policy_form(self, name, port_information, wsdl_source, **kwargs):
        """
        creates a new WSDL Policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_policy_form(name, port_information, wsdl_source, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name:  (required)
        :param Object port_information:  (required)
        :param str wsdl_source:  (required)
        :param bool allow_additional_headers: 
        :param bool body_validation: 
        :param str description: 
        :param bool envelope_validation: 
        :param bool header_validation: 
        :param str idp_group: 
        :param Object operations: 
        :param str password: 
        :param bool post_process_request: 
        :param bool post_process_response: 
        :param str post_request_process: 
        :param str post_request_process_type: 
        :param str post_response_process: 
        :param str post_response_process_type: 
        :param bool process_request: 
        :param bool process_response: 
        :param str request_process: 
        :param str request_process_type: 
        :param str response_process: 
        :param str response_process_type: 
        :param str user_name: 
        :param str wsdl_binding_name: 
        :param str wsdl_definition_name: 
        :param str wsdl_library: 
        :param str wsdl_namespace: 
        :param str wsdl_port_name: 
        :param str wsdl_port_type_name: 
        :param str wsdl_service_name: 
        :param str wsdl_url: 
        :param bool wsi_validation: 
        :return: WsdlPolicies
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_policy_form_with_http_info(name, port_information, wsdl_source, **kwargs)
        else:
            (data) = self.create_policy_form_with_http_info(name, port_information, wsdl_source, **kwargs)
            return data

    def create_policy_form_with_http_info(self, name, port_information, wsdl_source, **kwargs):
        """
        creates a new WSDL Policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_policy_form_with_http_info(name, port_information, wsdl_source, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name:  (required)
        :param Object port_information:  (required)
        :param str wsdl_source:  (required)
        :param bool allow_additional_headers: 
        :param bool body_validation: 
        :param str description: 
        :param bool envelope_validation: 
        :param bool header_validation: 
        :param str idp_group: 
        :param Object operations: 
        :param str password: 
        :param bool post_process_request: 
        :param bool post_process_response: 
        :param str post_request_process: 
        :param str post_request_process_type: 
        :param str post_response_process: 
        :param str post_response_process_type: 
        :param bool process_request: 
        :param bool process_response: 
        :param str request_process: 
        :param str request_process_type: 
        :param str response_process: 
        :param str response_process_type: 
        :param str user_name: 
        :param str wsdl_binding_name: 
        :param str wsdl_definition_name: 
        :param str wsdl_library: 
        :param str wsdl_namespace: 
        :param str wsdl_port_name: 
        :param str wsdl_port_type_name: 
        :param str wsdl_service_name: 
        :param str wsdl_url: 
        :param bool wsi_validation: 
        :return: WsdlPolicies
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'port_information', 'wsdl_source', 'allow_additional_headers', 'body_validation', 'description', 'envelope_validation', 'header_validation', 'idp_group', 'operations', 'password', 'post_process_request', 'post_process_response', 'post_request_process', 'post_request_process_type', 'post_response_process', 'post_response_process_type', 'process_request', 'process_response', 'request_process', 'request_process_type', 'response_process', 'response_process_type', 'user_name', 'wsdl_binding_name', 'wsdl_definition_name', 'wsdl_library', 'wsdl_namespace', 'wsdl_port_name', 'wsdl_port_type_name', 'wsdl_service_name', 'wsdl_url', 'wsi_validation']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_policy_form" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_policy_form`")
        # verify the required parameter 'port_information' is set
        if ('port_information' not in params) or (params['port_information'] is None):
            raise ValueError("Missing the required parameter `port_information` when calling `create_policy_form`")
        # verify the required parameter 'wsdl_source' is set
        if ('wsdl_source' not in params) or (params['wsdl_source'] is None):
            raise ValueError("Missing the required parameter `wsdl_source` when calling `create_policy_form`")

        resource_path = '/policies/wsdlPolicies'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))
        if 'port_information' in params:
            form_params.append(('portInformation', params['port_information']))
        if 'wsdl_source' in params:
            form_params.append(('wsdlSource', params['wsdl_source']))
        if 'allow_additional_headers' in params:
            form_params.append(('allowAdditionalHeaders', params['allow_additional_headers']))
        if 'body_validation' in params:
            form_params.append(('bodyValidation', params['body_validation']))
        if 'description' in params:
            form_params.append(('description', params['description']))
        if 'envelope_validation' in params:
            form_params.append(('envelopeValidation', params['envelope_validation']))
        if 'header_validation' in params:
            form_params.append(('headerValidation', params['header_validation']))
        if 'idp_group' in params:
            form_params.append(('idpGroup', params['idp_group']))
        if 'operations' in params:
            form_params.append(('operations', params['operations']))
        if 'password' in params:
            form_params.append(('password', params['password']))
        if 'post_process_request' in params:
            form_params.append(('postProcessRequest', params['post_process_request']))
        if 'post_process_response' in params:
            form_params.append(('postProcessResponse', params['post_process_response']))
        if 'post_request_process' in params:
            form_params.append(('postRequestProcess', params['post_request_process']))
        if 'post_request_process_type' in params:
            form_params.append(('postRequestProcessType', params['post_request_process_type']))
        if 'post_response_process' in params:
            form_params.append(('postResponseProcess', params['post_response_process']))
        if 'post_response_process_type' in params:
            form_params.append(('postResponseProcessType', params['post_response_process_type']))
        if 'process_request' in params:
            form_params.append(('processRequest', params['process_request']))
        if 'process_response' in params:
            form_params.append(('processResponse', params['process_response']))
        if 'request_process' in params:
            form_params.append(('requestProcess', params['request_process']))
        if 'request_process_type' in params:
            form_params.append(('requestProcessType', params['request_process_type']))
        if 'response_process' in params:
            form_params.append(('responseProcess', params['response_process']))
        if 'response_process_type' in params:
            form_params.append(('responseProcessType', params['response_process_type']))
        if 'user_name' in params:
            form_params.append(('userName', params['user_name']))
        if 'wsdl_binding_name' in params:
            form_params.append(('wsdlBindingName', params['wsdl_binding_name']))
        if 'wsdl_definition_name' in params:
            form_params.append(('wsdlDefinitionName', params['wsdl_definition_name']))
        if 'wsdl_library' in params:
            form_params.append(('wsdlLibrary', params['wsdl_library']))
        if 'wsdl_namespace' in params:
            form_params.append(('wsdlNamespace', params['wsdl_namespace']))
        if 'wsdl_port_name' in params:
            form_params.append(('wsdlPortName', params['wsdl_port_name']))
        if 'wsdl_port_type_name' in params:
            form_params.append(('wsdlPortTypeName', params['wsdl_port_type_name']))
        if 'wsdl_service_name' in params:
            form_params.append(('wsdlServiceName', params['wsdl_service_name']))
        if 'wsdl_url' in params:
            form_params.append(('wsdlUrl', params['wsdl_url']))
        if 'wsi_validation' in params:
            form_params.append(('wsiValidation', params['wsi_validation']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='WsdlPolicies',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def export_fsg(self, id, password, **kwargs):
        """
        exports an fsg based on this policy to a file
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.export_fsg(id, password, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str password:  (required)
        :param str agent: 
        :return: JavaIoOutputStream
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.export_fsg_with_http_info(id, password, **kwargs)
        else:
            (data) = self.export_fsg_with_http_info(id, password, **kwargs)
            return data

    def export_fsg_with_http_info(self, id, password, **kwargs):
        """
        exports an fsg based on this policy to a file
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.export_fsg_with_http_info(id, password, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str password:  (required)
        :param str agent: 
        :return: JavaIoOutputStream
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'password', 'agent']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_fsg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `export_fsg`")
        # verify the required parameter 'password' is set
        if ('password' not in params) or (params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `export_fsg`")

        resource_path = '/policies/wsdlPolicies/{id}/fsg'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'agent' in params:
            query_params['agent'] = params['agent']

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'password' in params:
            form_params.append(('password', params['password']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/octet-stream'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/xml', 'application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='JavaIoOutputStream',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_policy(self, id, port_id, **kwargs):
        """
        gets the Port
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_policy(id, port_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str port_id:  (required)
        :return: Port
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_policy_with_http_info(id, port_id, **kwargs)
        else:
            (data) = self.get_policy_with_http_info(id, port_id, **kwargs)
            return data

    def get_policy_with_http_info(self, id, port_id, **kwargs):
        """
        gets the Port
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_policy_with_http_info(id, port_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str port_id:  (required)
        :return: Port
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'port_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_policy`")
        # verify the required parameter 'port_id' is set
        if ('port_id' not in params) or (params['port_id'] is None):
            raise ValueError("Missing the required parameter `port_id` when calling `get_policy`")

        resource_path = '/policies/wsdlPolicies/{id}/ports/{portId}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'port_id' in params:
            path_params['portId'] = params['port_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Port',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_policy_0(self, id, **kwargs):
        """
        gets the WSDL Policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_policy_0(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :return: WsdlPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_policy_0_with_http_info(id, **kwargs)
        else:
            (data) = self.get_policy_0_with_http_info(id, **kwargs)
            return data

    def get_policy_0_with_http_info(self, id, **kwargs):
        """
        gets the WSDL Policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_policy_0_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :return: WsdlPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_policy_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_policy_0`")

        resource_path = '/policies/wsdlPolicies/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='WsdlPolicy',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_policy_list(self, **kwargs):
        """
        returns a list of policies
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_policy_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: PolicyList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_policy_list_with_http_info(**kwargs)
        else:
            (data) = self.get_policy_list_with_http_info(**kwargs)
            return data

    def get_policy_list_with_http_info(self, **kwargs):
        """
        returns a list of policies
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_policy_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: PolicyList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_policy_list" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/policies/wsdlPolicies'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PolicyList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_policy_list_0(self, id, **kwargs):
        """
        returns a list of this policyLists virtual directories
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_policy_list_0(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :return: PolicyList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_policy_list_0_with_http_info(id, **kwargs)
        else:
            (data) = self.get_policy_list_0_with_http_info(id, **kwargs)
            return data

    def get_policy_list_0_with_http_info(self, id, **kwargs):
        """
        returns a list of this policyLists virtual directories
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_policy_list_0_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :return: PolicyList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_policy_list_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_policy_list_0`")

        resource_path = '/policies/wsdlPolicies/{id}/ports'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PolicyList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def remove_policy(self, id, port_id, **kwargs):
        """
        deletes the policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_policy(id, port_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str port_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.remove_policy_with_http_info(id, port_id, **kwargs)
        else:
            (data) = self.remove_policy_with_http_info(id, port_id, **kwargs)
            return data

    def remove_policy_with_http_info(self, id, port_id, **kwargs):
        """
        deletes the policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_policy_with_http_info(id, port_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str port_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'port_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_policy`")
        # verify the required parameter 'port_id' is set
        if ('port_id' not in params) or (params['port_id'] is None):
            raise ValueError("Missing the required parameter `port_id` when calling `remove_policy`")

        resource_path = '/policies/wsdlPolicies/{id}/ports/{portId}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'port_id' in params:
            path_params['portId'] = params['port_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def remove_policy_0(self, id, **kwargs):
        """
        deletes the policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_policy_0(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.remove_policy_0_with_http_info(id, **kwargs)
        else:
            (data) = self.remove_policy_0_with_http_info(id, **kwargs)
            return data

    def remove_policy_0_with_http_info(self, id, **kwargs):
        """
        deletes the policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_policy_0_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_policy_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_policy_0`")

        resource_path = '/policies/wsdlPolicies/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def transfer_fsg(self, id, agent_group, **kwargs):
        """
        transfers an fsg based on this policy to the specified agent group
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.transfer_fsg(id, agent_group, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str agent_group:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.transfer_fsg_with_http_info(id, agent_group, **kwargs)
        else:
            (data) = self.transfer_fsg_with_http_info(id, agent_group, **kwargs)
            return data

    def transfer_fsg_with_http_info(self, id, agent_group, **kwargs):
        """
        transfers an fsg based on this policy to the specified agent group
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.transfer_fsg_with_http_info(id, agent_group, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str agent_group:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'agent_group']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transfer_fsg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `transfer_fsg`")
        # verify the required parameter 'agent_group' is set
        if ('agent_group' not in params) or (params['agent_group'] is None):
            raise ValueError("Missing the required parameter `agent_group` when calling `transfer_fsg`")

        resource_path = '/policies/wsdlPolicies/{id}/transfer'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'agent_group' in params:
            query_params['agentGroup'] = params['agent_group']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_policy(self, id, port_id, **kwargs):
        """
        updates the Port
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_policy(id, port_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str port_id:  (required)
        :param str acl_policy: 
        :param str description: 
        :param str error_template: 
        :param str request_filter_policy: 
        :return: Port
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_policy_with_http_info(id, port_id, **kwargs)
        else:
            (data) = self.update_policy_with_http_info(id, port_id, **kwargs)
            return data

    def update_policy_with_http_info(self, id, port_id, **kwargs):
        """
        updates the Port
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_policy_with_http_info(id, port_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str port_id:  (required)
        :param str acl_policy: 
        :param str description: 
        :param str error_template: 
        :param str request_filter_policy: 
        :return: Port
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'port_id', 'acl_policy', 'description', 'error_template', 'request_filter_policy']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_policy`")
        # verify the required parameter 'port_id' is set
        if ('port_id' not in params) or (params['port_id'] is None):
            raise ValueError("Missing the required parameter `port_id` when calling `update_policy`")

        resource_path = '/policies/wsdlPolicies/{id}/ports/{portId}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'port_id' in params:
            path_params['portId'] = params['port_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'acl_policy' in params:
            form_params.append(('aclPolicy', params['acl_policy']))
        if 'description' in params:
            form_params.append(('description', params['description']))
        if 'error_template' in params:
            form_params.append(('errorTemplate', params['error_template']))
        if 'request_filter_policy' in params:
            form_params.append(('requestFilterPolicy', params['request_filter_policy']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Port',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_policy_0(self, id, **kwargs):
        """
        updates the WSDL Policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_policy_0(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param bool allow_additional_headers: 
        :param bool body_validation: 
        :param str description: 
        :param bool envelope_validation: 
        :param bool header_validation: 
        :param str idp_group: 
        :param str name: 
        :param bool post_process_request: 
        :param bool post_process_response: 
        :param str post_request_process: 
        :param str post_request_process_type: 
        :param str post_response_process: 
        :param str post_response_process_type: 
        :param bool process_request: 
        :param bool process_response: 
        :param str request_process: 
        :param str request_process_type: 
        :param str response_process: 
        :param str response_process_type: 
        :param bool wsi_validation: 
        :return: WsdlPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_policy_0_with_http_info(id, **kwargs)
        else:
            (data) = self.update_policy_0_with_http_info(id, **kwargs)
            return data

    def update_policy_0_with_http_info(self, id, **kwargs):
        """
        updates the WSDL Policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_policy_0_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param bool allow_additional_headers: 
        :param bool body_validation: 
        :param str description: 
        :param bool envelope_validation: 
        :param bool header_validation: 
        :param str idp_group: 
        :param str name: 
        :param bool post_process_request: 
        :param bool post_process_response: 
        :param str post_request_process: 
        :param str post_request_process_type: 
        :param str post_response_process: 
        :param str post_response_process_type: 
        :param bool process_request: 
        :param bool process_response: 
        :param str request_process: 
        :param str request_process_type: 
        :param str response_process: 
        :param str response_process_type: 
        :param bool wsi_validation: 
        :return: WsdlPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'allow_additional_headers', 'body_validation', 'description', 'envelope_validation', 'header_validation', 'idp_group', 'name', 'post_process_request', 'post_process_response', 'post_request_process', 'post_request_process_type', 'post_response_process', 'post_response_process_type', 'process_request', 'process_response', 'request_process', 'request_process_type', 'response_process', 'response_process_type', 'wsi_validation']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_policy_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_policy_0`")

        resource_path = '/policies/wsdlPolicies/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'allow_additional_headers' in params:
            form_params.append(('allowAdditionalHeaders', params['allow_additional_headers']))
        if 'body_validation' in params:
            form_params.append(('bodyValidation', params['body_validation']))
        if 'description' in params:
            form_params.append(('description', params['description']))
        if 'envelope_validation' in params:
            form_params.append(('envelopeValidation', params['envelope_validation']))
        if 'header_validation' in params:
            form_params.append(('headerValidation', params['header_validation']))
        if 'idp_group' in params:
            form_params.append(('idpGroup', params['idp_group']))
        if 'name' in params:
            form_params.append(('name', params['name']))
        if 'post_process_request' in params:
            form_params.append(('postProcessRequest', params['post_process_request']))
        if 'post_process_response' in params:
            form_params.append(('postProcessResponse', params['post_process_response']))
        if 'post_request_process' in params:
            form_params.append(('postRequestProcess', params['post_request_process']))
        if 'post_request_process_type' in params:
            form_params.append(('postRequestProcessType', params['post_request_process_type']))
        if 'post_response_process' in params:
            form_params.append(('postResponseProcess', params['post_response_process']))
        if 'post_response_process_type' in params:
            form_params.append(('postResponseProcessType', params['post_response_process_type']))
        if 'process_request' in params:
            form_params.append(('processRequest', params['process_request']))
        if 'process_response' in params:
            form_params.append(('processResponse', params['process_response']))
        if 'request_process' in params:
            form_params.append(('requestProcess', params['request_process']))
        if 'request_process_type' in params:
            form_params.append(('requestProcessType', params['request_process_type']))
        if 'response_process' in params:
            form_params.append(('responseProcess', params['response_process']))
        if 'response_process_type' in params:
            form_params.append(('responseProcessType', params['response_process_type']))
        if 'wsi_validation' in params:
            form_params.append(('wsiValidation', params['wsi_validation']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='WsdlPolicy',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def upgrade_policy(self, id, wsdl_source, **kwargs):
        """
        upgrades the WSDL Policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upgrade_policy(id, wsdl_source, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str wsdl_source:  (required)
        :param str description: 
        :param str name: 
        :param Object operations: 
        :param str password: 
        :param Object port_information: 
        :param str user_name: 
        :param str wsdl_binding_name: 
        :param str wsdl_definition_name: 
        :param str wsdl_library: 
        :param str wsdl_namespace: 
        :param str wsdl_port_name: 
        :param str wsdl_port_type_name: 
        :param str wsdl_service_name: 
        :param str wsdl_url: 
        :return: WsdlPolicyUpgrade
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.upgrade_policy_with_http_info(id, wsdl_source, **kwargs)
        else:
            (data) = self.upgrade_policy_with_http_info(id, wsdl_source, **kwargs)
            return data

    def upgrade_policy_with_http_info(self, id, wsdl_source, **kwargs):
        """
        upgrades the WSDL Policy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upgrade_policy_with_http_info(id, wsdl_source, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :param str wsdl_source:  (required)
        :param str description: 
        :param str name: 
        :param Object operations: 
        :param str password: 
        :param Object port_information: 
        :param str user_name: 
        :param str wsdl_binding_name: 
        :param str wsdl_definition_name: 
        :param str wsdl_library: 
        :param str wsdl_namespace: 
        :param str wsdl_port_name: 
        :param str wsdl_port_type_name: 
        :param str wsdl_service_name: 
        :param str wsdl_url: 
        :return: WsdlPolicyUpgrade
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'wsdl_source', 'description', 'name', 'operations', 'password', 'port_information', 'user_name', 'wsdl_binding_name', 'wsdl_definition_name', 'wsdl_library', 'wsdl_namespace', 'wsdl_port_name', 'wsdl_port_type_name', 'wsdl_service_name', 'wsdl_url']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upgrade_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `upgrade_policy`")
        # verify the required parameter 'wsdl_source' is set
        if ('wsdl_source' not in params) or (params['wsdl_source'] is None):
            raise ValueError("Missing the required parameter `wsdl_source` when calling `upgrade_policy`")

        resource_path = '/policies/wsdlPolicies/{id}/upgrade'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'wsdl_source' in params:
            form_params.append(('wsdlSource', params['wsdl_source']))
        if 'description' in params:
            form_params.append(('description', params['description']))
        if 'name' in params:
            form_params.append(('name', params['name']))
        if 'operations' in params:
            form_params.append(('operations', params['operations']))
        if 'password' in params:
            form_params.append(('password', params['password']))
        if 'port_information' in params:
            form_params.append(('portInformation', params['port_information']))
        if 'user_name' in params:
            form_params.append(('userName', params['user_name']))
        if 'wsdl_binding_name' in params:
            form_params.append(('wsdlBindingName', params['wsdl_binding_name']))
        if 'wsdl_definition_name' in params:
            form_params.append(('wsdlDefinitionName', params['wsdl_definition_name']))
        if 'wsdl_library' in params:
            form_params.append(('wsdlLibrary', params['wsdl_library']))
        if 'wsdl_namespace' in params:
            form_params.append(('wsdlNamespace', params['wsdl_namespace']))
        if 'wsdl_port_name' in params:
            form_params.append(('wsdlPortName', params['wsdl_port_name']))
        if 'wsdl_port_type_name' in params:
            form_params.append(('wsdlPortTypeName', params['wsdl_port_type_name']))
        if 'wsdl_service_name' in params:
            form_params.append(('wsdlServiceName', params['wsdl_service_name']))
        if 'wsdl_url' in params:
            form_params.append(('wsdlUrl', params['wsdl_url']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='WsdlPolicyUpgrade',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
