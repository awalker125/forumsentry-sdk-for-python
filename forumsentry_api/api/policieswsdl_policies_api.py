# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from forumsentry_api.api_client import ApiClient


class PolicieswsdlPoliciesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_fs_project_node_copy(self, id, new_id, **kwargs):  # noqa: E501
        """creates a copy of the WSDL Policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_fs_project_node_copy(id, new_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str new_id: (required)
        :return: WsdlPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_fs_project_node_copy_with_http_info(id, new_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_fs_project_node_copy_with_http_info(id, new_id, **kwargs)  # noqa: E501
            return data

    def create_fs_project_node_copy_with_http_info(self, id, new_id, **kwargs):  # noqa: E501
        """creates a copy of the WSDL Policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_fs_project_node_copy_with_http_info(id, new_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str new_id: (required)
        :return: WsdlPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'new_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_fs_project_node_copy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `create_fs_project_node_copy`")  # noqa: E501
        # verify the required parameter 'new_id' is set
        if ('new_id' not in params or
                params['new_id'] is None):
            raise ValueError("Missing the required parameter `new_id` when calling `create_fs_project_node_copy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'new_id' in params:
            query_params.append(('newId', params['new_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/policies/wsdlPolicies/{id}/copy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WsdlPolicy',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_policy_form(self, name, port_information, wsdl_source, **kwargs):  # noqa: E501
        """creates a new WSDL Policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_policy_form(name, port_information, wsdl_source, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: (required)
        :param Object port_information: (required)
        :param str wsdl_source: (required)
        :param bool allow_additional_headers:
        :param bool body_validation:
        :param str description:
        :param bool envelope_validation:
        :param bool header_validation:
        :param str idp_group:
        :param Object operations:
        :param str password:
        :param bool post_process_request:
        :param bool post_process_response:
        :param str post_request_process:
        :param str post_request_process_type:
        :param str post_response_process:
        :param str post_response_process_type:
        :param bool process_request:
        :param bool process_response:
        :param str request_process:
        :param str request_process_type:
        :param str response_process:
        :param str response_process_type:
        :param str user_name:
        :param str wsdl_binding_name:
        :param str wsdl_definition_name:
        :param str wsdl_library:
        :param str wsdl_namespace:
        :param str wsdl_port_name:
        :param str wsdl_port_type_name:
        :param str wsdl_service_name:
        :param str wsdl_url:
        :param bool wsi_validation:
        :return: WsdlPolicies
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_policy_form_with_http_info(name, port_information, wsdl_source, **kwargs)  # noqa: E501
        else:
            (data) = self.create_policy_form_with_http_info(name, port_information, wsdl_source, **kwargs)  # noqa: E501
            return data

    def create_policy_form_with_http_info(self, name, port_information, wsdl_source, **kwargs):  # noqa: E501
        """creates a new WSDL Policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_policy_form_with_http_info(name, port_information, wsdl_source, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: (required)
        :param Object port_information: (required)
        :param str wsdl_source: (required)
        :param bool allow_additional_headers:
        :param bool body_validation:
        :param str description:
        :param bool envelope_validation:
        :param bool header_validation:
        :param str idp_group:
        :param Object operations:
        :param str password:
        :param bool post_process_request:
        :param bool post_process_response:
        :param str post_request_process:
        :param str post_request_process_type:
        :param str post_response_process:
        :param str post_response_process_type:
        :param bool process_request:
        :param bool process_response:
        :param str request_process:
        :param str request_process_type:
        :param str response_process:
        :param str response_process_type:
        :param str user_name:
        :param str wsdl_binding_name:
        :param str wsdl_definition_name:
        :param str wsdl_library:
        :param str wsdl_namespace:
        :param str wsdl_port_name:
        :param str wsdl_port_type_name:
        :param str wsdl_service_name:
        :param str wsdl_url:
        :param bool wsi_validation:
        :return: WsdlPolicies
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'port_information', 'wsdl_source', 'allow_additional_headers', 'body_validation', 'description', 'envelope_validation', 'header_validation', 'idp_group', 'operations', 'password', 'post_process_request', 'post_process_response', 'post_request_process', 'post_request_process_type', 'post_response_process', 'post_response_process_type', 'process_request', 'process_response', 'request_process', 'request_process_type', 'response_process', 'response_process_type', 'user_name', 'wsdl_binding_name', 'wsdl_definition_name', 'wsdl_library', 'wsdl_namespace', 'wsdl_port_name', 'wsdl_port_type_name', 'wsdl_service_name', 'wsdl_url', 'wsi_validation']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_policy_form" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_policy_form`")  # noqa: E501
        # verify the required parameter 'port_information' is set
        if ('port_information' not in params or
                params['port_information'] is None):
            raise ValueError("Missing the required parameter `port_information` when calling `create_policy_form`")  # noqa: E501
        # verify the required parameter 'wsdl_source' is set
        if ('wsdl_source' not in params or
                params['wsdl_source'] is None):
            raise ValueError("Missing the required parameter `wsdl_source` when calling `create_policy_form`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'port_information' in params:
            form_params.append(('portInformation', params['port_information']))  # noqa: E501
        if 'wsdl_source' in params:
            form_params.append(('wsdlSource', params['wsdl_source']))  # noqa: E501
        if 'allow_additional_headers' in params:
            form_params.append(('allowAdditionalHeaders', params['allow_additional_headers']))  # noqa: E501
        if 'body_validation' in params:
            form_params.append(('bodyValidation', params['body_validation']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'envelope_validation' in params:
            form_params.append(('envelopeValidation', params['envelope_validation']))  # noqa: E501
        if 'header_validation' in params:
            form_params.append(('headerValidation', params['header_validation']))  # noqa: E501
        if 'idp_group' in params:
            form_params.append(('idpGroup', params['idp_group']))  # noqa: E501
        if 'operations' in params:
            form_params.append(('operations', params['operations']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501
        if 'post_process_request' in params:
            form_params.append(('postProcessRequest', params['post_process_request']))  # noqa: E501
        if 'post_process_response' in params:
            form_params.append(('postProcessResponse', params['post_process_response']))  # noqa: E501
        if 'post_request_process' in params:
            form_params.append(('postRequestProcess', params['post_request_process']))  # noqa: E501
        if 'post_request_process_type' in params:
            form_params.append(('postRequestProcessType', params['post_request_process_type']))  # noqa: E501
        if 'post_response_process' in params:
            form_params.append(('postResponseProcess', params['post_response_process']))  # noqa: E501
        if 'post_response_process_type' in params:
            form_params.append(('postResponseProcessType', params['post_response_process_type']))  # noqa: E501
        if 'process_request' in params:
            form_params.append(('processRequest', params['process_request']))  # noqa: E501
        if 'process_response' in params:
            form_params.append(('processResponse', params['process_response']))  # noqa: E501
        if 'request_process' in params:
            form_params.append(('requestProcess', params['request_process']))  # noqa: E501
        if 'request_process_type' in params:
            form_params.append(('requestProcessType', params['request_process_type']))  # noqa: E501
        if 'response_process' in params:
            form_params.append(('responseProcess', params['response_process']))  # noqa: E501
        if 'response_process_type' in params:
            form_params.append(('responseProcessType', params['response_process_type']))  # noqa: E501
        if 'user_name' in params:
            form_params.append(('userName', params['user_name']))  # noqa: E501
        if 'wsdl_binding_name' in params:
            form_params.append(('wsdlBindingName', params['wsdl_binding_name']))  # noqa: E501
        if 'wsdl_definition_name' in params:
            form_params.append(('wsdlDefinitionName', params['wsdl_definition_name']))  # noqa: E501
        if 'wsdl_library' in params:
            form_params.append(('wsdlLibrary', params['wsdl_library']))  # noqa: E501
        if 'wsdl_namespace' in params:
            form_params.append(('wsdlNamespace', params['wsdl_namespace']))  # noqa: E501
        if 'wsdl_port_name' in params:
            form_params.append(('wsdlPortName', params['wsdl_port_name']))  # noqa: E501
        if 'wsdl_port_type_name' in params:
            form_params.append(('wsdlPortTypeName', params['wsdl_port_type_name']))  # noqa: E501
        if 'wsdl_service_name' in params:
            form_params.append(('wsdlServiceName', params['wsdl_service_name']))  # noqa: E501
        if 'wsdl_url' in params:
            form_params.append(('wsdlUrl', params['wsdl_url']))  # noqa: E501
        if 'wsi_validation' in params:
            form_params.append(('wsiValidation', params['wsi_validation']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/policies/wsdlPolicies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WsdlPolicies',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_fsg(self, id, password, **kwargs):  # noqa: E501
        """exports an fsg based on this policy to a file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.export_fsg(id, password, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str password: (required)
        :param str agent:
        :return: JavaIoOutputStream
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.export_fsg_with_http_info(id, password, **kwargs)  # noqa: E501
        else:
            (data) = self.export_fsg_with_http_info(id, password, **kwargs)  # noqa: E501
            return data

    def export_fsg_with_http_info(self, id, password, **kwargs):  # noqa: E501
        """exports an fsg based on this policy to a file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.export_fsg_with_http_info(id, password, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str password: (required)
        :param str agent:
        :return: JavaIoOutputStream
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'password', 'agent']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_fsg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `export_fsg`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `export_fsg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'agent' in params:
            query_params.append(('agent', params['agent']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/policies/wsdlPolicies/{id}/fsg', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JavaIoOutputStream',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_policy(self, id, port_id, **kwargs):  # noqa: E501
        """gets the Port  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_policy(id, port_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str port_id: (required)
        :return: Port
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_policy_with_http_info(id, port_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_policy_with_http_info(id, port_id, **kwargs)  # noqa: E501
            return data

    def get_policy_with_http_info(self, id, port_id, **kwargs):  # noqa: E501
        """gets the Port  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_policy_with_http_info(id, port_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str port_id: (required)
        :return: Port
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'port_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_policy`")  # noqa: E501
        # verify the required parameter 'port_id' is set
        if ('port_id' not in params or
                params['port_id'] is None):
            raise ValueError("Missing the required parameter `port_id` when calling `get_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'port_id' in params:
            path_params['portId'] = params['port_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/policies/wsdlPolicies/{id}/ports/{portId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Port',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_policy_0(self, id, **kwargs):  # noqa: E501
        """gets the WSDL Policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_policy_0(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :return: WsdlPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_policy_0_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_policy_0_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_policy_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """gets the WSDL Policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_policy_0_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :return: WsdlPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_policy_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_policy_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/policies/wsdlPolicies/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WsdlPolicy',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_policy_list(self, **kwargs):  # noqa: E501
        """returns a list of policies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_policy_list(async=True)
        >>> result = thread.get()

        :param async bool
        :return: PolicyList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_policy_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_policy_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_policy_list_with_http_info(self, **kwargs):  # noqa: E501
        """returns a list of policies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_policy_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: PolicyList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_policy_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/policies/wsdlPolicies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PolicyList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_policy_list_0(self, id, **kwargs):  # noqa: E501
        """returns a list of this policyLists virtual directories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_policy_list_0(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :return: PolicyList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_policy_list_0_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_policy_list_0_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_policy_list_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """returns a list of this policyLists virtual directories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_policy_list_0_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :return: PolicyList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_policy_list_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_policy_list_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/policies/wsdlPolicies/{id}/ports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PolicyList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_policy(self, id, port_id, **kwargs):  # noqa: E501
        """deletes the policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_policy(id, port_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str port_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_policy_with_http_info(id, port_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_policy_with_http_info(id, port_id, **kwargs)  # noqa: E501
            return data

    def remove_policy_with_http_info(self, id, port_id, **kwargs):  # noqa: E501
        """deletes the policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_policy_with_http_info(id, port_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str port_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'port_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_policy`")  # noqa: E501
        # verify the required parameter 'port_id' is set
        if ('port_id' not in params or
                params['port_id'] is None):
            raise ValueError("Missing the required parameter `port_id` when calling `remove_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'port_id' in params:
            path_params['portId'] = params['port_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/policies/wsdlPolicies/{id}/ports/{portId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_policy_0(self, id, **kwargs):  # noqa: E501
        """deletes the policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_policy_0(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_policy_0_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_policy_0_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def remove_policy_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """deletes the policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_policy_0_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_policy_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_policy_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/policies/wsdlPolicies/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def transfer_fsg(self, id, agent_group, **kwargs):  # noqa: E501
        """transfers an fsg based on this policy to the specified agent group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.transfer_fsg(id, agent_group, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str agent_group: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.transfer_fsg_with_http_info(id, agent_group, **kwargs)  # noqa: E501
        else:
            (data) = self.transfer_fsg_with_http_info(id, agent_group, **kwargs)  # noqa: E501
            return data

    def transfer_fsg_with_http_info(self, id, agent_group, **kwargs):  # noqa: E501
        """transfers an fsg based on this policy to the specified agent group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.transfer_fsg_with_http_info(id, agent_group, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str agent_group: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'agent_group']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transfer_fsg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `transfer_fsg`")  # noqa: E501
        # verify the required parameter 'agent_group' is set
        if ('agent_group' not in params or
                params['agent_group'] is None):
            raise ValueError("Missing the required parameter `agent_group` when calling `transfer_fsg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'agent_group' in params:
            query_params.append(('agentGroup', params['agent_group']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/policies/wsdlPolicies/{id}/transfer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_policy(self, id, port_id, **kwargs):  # noqa: E501
        """updates the Port  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_policy(id, port_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str port_id: (required)
        :param str acl_policy:
        :param str description:
        :param str error_template:
        :param str request_filter_policy:
        :return: Port
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_policy_with_http_info(id, port_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_policy_with_http_info(id, port_id, **kwargs)  # noqa: E501
            return data

    def update_policy_with_http_info(self, id, port_id, **kwargs):  # noqa: E501
        """updates the Port  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_policy_with_http_info(id, port_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str port_id: (required)
        :param str acl_policy:
        :param str description:
        :param str error_template:
        :param str request_filter_policy:
        :return: Port
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'port_id', 'acl_policy', 'description', 'error_template', 'request_filter_policy']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_policy`")  # noqa: E501
        # verify the required parameter 'port_id' is set
        if ('port_id' not in params or
                params['port_id'] is None):
            raise ValueError("Missing the required parameter `port_id` when calling `update_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'port_id' in params:
            path_params['portId'] = params['port_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'acl_policy' in params:
            form_params.append(('aclPolicy', params['acl_policy']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'error_template' in params:
            form_params.append(('errorTemplate', params['error_template']))  # noqa: E501
        if 'request_filter_policy' in params:
            form_params.append(('requestFilterPolicy', params['request_filter_policy']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/policies/wsdlPolicies/{id}/ports/{portId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Port',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_policy_0(self, id, **kwargs):  # noqa: E501
        """updates the WSDL Policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_policy_0(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param bool allow_additional_headers:
        :param bool body_validation:
        :param str description:
        :param bool envelope_validation:
        :param bool header_validation:
        :param str idp_group:
        :param str name:
        :param bool post_process_request:
        :param bool post_process_response:
        :param str post_request_process:
        :param str post_request_process_type:
        :param str post_response_process:
        :param str post_response_process_type:
        :param bool process_request:
        :param bool process_response:
        :param str request_process:
        :param str request_process_type:
        :param str response_process:
        :param str response_process_type:
        :param bool wsi_validation:
        :return: WsdlPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_policy_0_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_policy_0_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_policy_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """updates the WSDL Policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_policy_0_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param bool allow_additional_headers:
        :param bool body_validation:
        :param str description:
        :param bool envelope_validation:
        :param bool header_validation:
        :param str idp_group:
        :param str name:
        :param bool post_process_request:
        :param bool post_process_response:
        :param str post_request_process:
        :param str post_request_process_type:
        :param str post_response_process:
        :param str post_response_process_type:
        :param bool process_request:
        :param bool process_response:
        :param str request_process:
        :param str request_process_type:
        :param str response_process:
        :param str response_process_type:
        :param bool wsi_validation:
        :return: WsdlPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'allow_additional_headers', 'body_validation', 'description', 'envelope_validation', 'header_validation', 'idp_group', 'name', 'post_process_request', 'post_process_response', 'post_request_process', 'post_request_process_type', 'post_response_process', 'post_response_process_type', 'process_request', 'process_response', 'request_process', 'request_process_type', 'response_process', 'response_process_type', 'wsi_validation']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_policy_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_policy_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'allow_additional_headers' in params:
            form_params.append(('allowAdditionalHeaders', params['allow_additional_headers']))  # noqa: E501
        if 'body_validation' in params:
            form_params.append(('bodyValidation', params['body_validation']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'envelope_validation' in params:
            form_params.append(('envelopeValidation', params['envelope_validation']))  # noqa: E501
        if 'header_validation' in params:
            form_params.append(('headerValidation', params['header_validation']))  # noqa: E501
        if 'idp_group' in params:
            form_params.append(('idpGroup', params['idp_group']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'post_process_request' in params:
            form_params.append(('postProcessRequest', params['post_process_request']))  # noqa: E501
        if 'post_process_response' in params:
            form_params.append(('postProcessResponse', params['post_process_response']))  # noqa: E501
        if 'post_request_process' in params:
            form_params.append(('postRequestProcess', params['post_request_process']))  # noqa: E501
        if 'post_request_process_type' in params:
            form_params.append(('postRequestProcessType', params['post_request_process_type']))  # noqa: E501
        if 'post_response_process' in params:
            form_params.append(('postResponseProcess', params['post_response_process']))  # noqa: E501
        if 'post_response_process_type' in params:
            form_params.append(('postResponseProcessType', params['post_response_process_type']))  # noqa: E501
        if 'process_request' in params:
            form_params.append(('processRequest', params['process_request']))  # noqa: E501
        if 'process_response' in params:
            form_params.append(('processResponse', params['process_response']))  # noqa: E501
        if 'request_process' in params:
            form_params.append(('requestProcess', params['request_process']))  # noqa: E501
        if 'request_process_type' in params:
            form_params.append(('requestProcessType', params['request_process_type']))  # noqa: E501
        if 'response_process' in params:
            form_params.append(('responseProcess', params['response_process']))  # noqa: E501
        if 'response_process_type' in params:
            form_params.append(('responseProcessType', params['response_process_type']))  # noqa: E501
        if 'wsi_validation' in params:
            form_params.append(('wsiValidation', params['wsi_validation']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/policies/wsdlPolicies/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WsdlPolicy',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upgrade_policy(self, id, wsdl_source, **kwargs):  # noqa: E501
        """upgrades the WSDL Policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.upgrade_policy(id, wsdl_source, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str wsdl_source: (required)
        :param str description:
        :param str name:
        :param Object operations:
        :param str password:
        :param Object port_information:
        :param str user_name:
        :param str wsdl_binding_name:
        :param str wsdl_definition_name:
        :param str wsdl_library:
        :param str wsdl_namespace:
        :param str wsdl_port_name:
        :param str wsdl_port_type_name:
        :param str wsdl_service_name:
        :param str wsdl_url:
        :return: WsdlPolicyUpgrade
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.upgrade_policy_with_http_info(id, wsdl_source, **kwargs)  # noqa: E501
        else:
            (data) = self.upgrade_policy_with_http_info(id, wsdl_source, **kwargs)  # noqa: E501
            return data

    def upgrade_policy_with_http_info(self, id, wsdl_source, **kwargs):  # noqa: E501
        """upgrades the WSDL Policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.upgrade_policy_with_http_info(id, wsdl_source, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: (required)
        :param str wsdl_source: (required)
        :param str description:
        :param str name:
        :param Object operations:
        :param str password:
        :param Object port_information:
        :param str user_name:
        :param str wsdl_binding_name:
        :param str wsdl_definition_name:
        :param str wsdl_library:
        :param str wsdl_namespace:
        :param str wsdl_port_name:
        :param str wsdl_port_type_name:
        :param str wsdl_service_name:
        :param str wsdl_url:
        :return: WsdlPolicyUpgrade
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'wsdl_source', 'description', 'name', 'operations', 'password', 'port_information', 'user_name', 'wsdl_binding_name', 'wsdl_definition_name', 'wsdl_library', 'wsdl_namespace', 'wsdl_port_name', 'wsdl_port_type_name', 'wsdl_service_name', 'wsdl_url']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upgrade_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `upgrade_policy`")  # noqa: E501
        # verify the required parameter 'wsdl_source' is set
        if ('wsdl_source' not in params or
                params['wsdl_source'] is None):
            raise ValueError("Missing the required parameter `wsdl_source` when calling `upgrade_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'wsdl_source' in params:
            form_params.append(('wsdlSource', params['wsdl_source']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'operations' in params:
            form_params.append(('operations', params['operations']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501
        if 'port_information' in params:
            form_params.append(('portInformation', params['port_information']))  # noqa: E501
        if 'user_name' in params:
            form_params.append(('userName', params['user_name']))  # noqa: E501
        if 'wsdl_binding_name' in params:
            form_params.append(('wsdlBindingName', params['wsdl_binding_name']))  # noqa: E501
        if 'wsdl_definition_name' in params:
            form_params.append(('wsdlDefinitionName', params['wsdl_definition_name']))  # noqa: E501
        if 'wsdl_library' in params:
            form_params.append(('wsdlLibrary', params['wsdl_library']))  # noqa: E501
        if 'wsdl_namespace' in params:
            form_params.append(('wsdlNamespace', params['wsdl_namespace']))  # noqa: E501
        if 'wsdl_port_name' in params:
            form_params.append(('wsdlPortName', params['wsdl_port_name']))  # noqa: E501
        if 'wsdl_port_type_name' in params:
            form_params.append(('wsdlPortTypeName', params['wsdl_port_type_name']))  # noqa: E501
        if 'wsdl_service_name' in params:
            form_params.append(('wsdlServiceName', params['wsdl_service_name']))  # noqa: E501
        if 'wsdl_url' in params:
            form_params.append(('wsdlUrl', params['wsdl_url']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/policies/wsdlPolicies/{id}/upgrade', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WsdlPolicyUpgrade',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
